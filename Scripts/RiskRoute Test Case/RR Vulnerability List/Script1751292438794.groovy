import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys
import com.kms.katalon.core.webui.driver.DriverFactory as DriverFactory
import org.openqa.selenium.JavascriptExecutor as JavascriptExecutor
import org.openqa.selenium.WebElement as WebElement
import com.kms.katalon.core.webui.common.WebUiCommonHelper as WebUiCommonHelper
import org.openqa.selenium.WebDriver as WebDriver
import com.kms.katalon.core.testobject.ConditionType
import com.kms.katalon.core.util.KeywordUtil
import org.openqa.selenium.By
import org.openqa.selenium.interactions.Actions
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions



// ✅ Fonksiyon: Scroll edip görünür hale getir
def scrollToVisible(WebElement element, JavascriptExecutor js) {
	int currentScroll = 0
	boolean isVisible = false
	while (!isVisible && currentScroll < 3000) {
		js.executeScript("window.scrollBy(0, 200)")
		WebUI.delay(0.5)
		isVisible = element.isDisplayed()
		currentScroll += 200
	}
	return isVisible
}

WebElement safeScrollTo(TestObject to) {
	if (to == null) {
		KeywordUtil.markFailed("❌ TestObject NULL – Repository yolunu kontrol et.")
		return null
	}
	if (!WebUI.waitForElementPresent(to, 5, FailureHandling.OPTIONAL)) {
		KeywordUtil.logInfo("ℹ️ Element not present, scroll işlemi atlandı: ${to.getObjectId()}")
		return null
	}
	WebElement element = WebUiCommonHelper.findWebElement(to, 5)
	JavascriptExecutor js = (JavascriptExecutor) DriverFactory.getWebDriver()
	js.executeScript("arguments[0].scrollIntoView({block: 'center'});", element)
	WebUI.delay(0.5)
	return element
}
// Tarayıcıyı aç ve siteye git
WebUI.openBrowser('')

WebUI.navigateToUrl('https://platform.catchprobe.org/')

WebUI.maximizeWindow()

// Login işlemleri
WebUI.waitForElementVisible(findTestObject('Object Repository/RiskRoute Dashboard/Page_/a_PLATFORM LOGIN'), 30)

WebUI.click(findTestObject('Object Repository/RiskRoute Dashboard/Page_/a_PLATFORM LOGIN'))

WebUI.waitForElementVisible(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Email Address_email'), 30)

WebUI.setText(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Email Address_email'), 'katalon.test@catchprobe.com')

WebUI.setEncryptedText(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Password_password'), 'RigbBhfdqOBDK95asqKeHw==')

WebUI.click(findTestObject('Object Repository/RiskRoute Dashboard/Page_/button_Sign in'))

WebUI.delay(5)

// OTP işlemi
def randomOtp = (100000 + new Random().nextInt(900000)).toString()

WebUI.setText(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_OTP Digit_vi_1_2_3_4_5'), randomOtp)

WebUI.click(findTestObject('Object Repository/RiskRoute Dashboard/Page_/button_Verify'))

WebUI.delay(5)

WebUI.waitForPageLoad(10)

//
// Riskroute sekmesine tıkla

WebUI.navigateToUrl('https://platform.catchprobe.org/riskroute')
WebUI.delay(5)
WebUI.navigateToUrl('https://platform.catchprobe.org/vulnerability-list')
WebUI.delay(1)

WebUI.waitForPageLoad(10)

WebDriver driver = DriverFactory.getWebDriver()
JavascriptExecutor js = (JavascriptExecutor) driver

WebUI.delay(2)

TestObject targetobj = new TestObject()
targetobj.addProperty("xpath", ConditionType.EQUALS, "//div[@class='col-span-4 justify-left text-left flex items-center gap-2 text-sm truncate p-2' and not(contains(text(), 'Title')) and not(contains(text(), 'Vulnerable Url'))]")
WebUI.waitForElementVisible(targetobj, 5)
String TargetText = WebUI.getText(targetobj)
WebUI.delay(2)

TestObject titletobj = new TestObject()
titletobj.addProperty("xpath", ConditionType.EQUALS, "//div[@class='col-span-4 justify-left text-left items-center text-sm truncate p-2 grid grid-cols-1 gap-2']")
WebUI.waitForElementVisible(titletobj, 5)
String TitlieText = WebUI.getText(titletobj)
String onlyTitle = TitlieText.readLines().first()
println "Bulunan başlık: " + onlyTitle
WebUI.delay(2)

/*/*
TestObject VulnerInput = findTestObject('Object Repository/Vulnerability List/Vulnerability İnput')
WebUI.click(VulnerInput)
WebUI.delay(1)
WebUI.sendKeys(VulnerInput, onlyTitle)
WebUI.delay(2)

TestObject TargetInput = findTestObject('Object Repository/Vulnerability List/Target İnput')
WebUI.click(TargetInput)
WebUI.delay(1)
WebUI.sendKeys(TargetInput, TargetText)
WebUI.delay(2)

WebUI.click(findTestObject('Object Repository/Vulnerability List/button_SEARCH'))
WebUI.delay(2)
WebUI.waitForPageLoad(30)
/*/

TestObject resolveLinkObj = new TestObject()
resolveLinkObj.addProperty("xpath", ConditionType.EQUALS, "(//a[contains(@href, '/vulnerability-list/resolve-unresolve/')])[1]")
WebElement resolveLinkElement = WebUI.findWebElement(resolveLinkObj, 10)
String hrefValue = resolveLinkElement.getAttribute("href")
String uniqueId = hrefValue.substring(hrefValue.lastIndexOf("/") + 1)
println "Bulunan eşsiz ID: " + uniqueId
resolveLinkElement.click()

WebUI.click(findTestObject('Object Repository/Host List/Resolve'))
WebUI.waitForElementVisible(findTestObject('Object Repository/Vulnerability List/Vulnerability successfully'), 15)
WebUI.click(findTestObject('Object Repository/Threat Actor/Threataa/Page_/Mitre Close'))

String rowXpath = "//a[contains(@href, '" + uniqueId + "')]/ancestor::div[contains(@class, 'grid')]"
boolean found = false

TestObject rowObj = new TestObject()
rowObj.addProperty("xpath", ConditionType.EQUALS, rowXpath)
if (WebUI.waitForElementPresent(rowObj, 5, FailureHandling.OPTIONAL)) {
	safeScrollTo(rowObj)
	found = true
	println("✅ Satır 1. pagination’da bulundu ve scroll yapıldı.")
} else {
	println("ℹ️ Satır 1. sayfada bulunamadı, 2. sayfaya geçiliyor...")

	TestObject page2Btn = new TestObject()
	page2Btn.addProperty("xpath", ConditionType.EQUALS, "//a[contains(@class,'rounded-md') and text()='2']")
	safeScrollTo(page2Btn)
	WebUI.click(page2Btn)
	WebUI.delay(3)

	TestObject rowObjPage2 = new TestObject()
	rowObjPage2.addProperty("xpath", ConditionType.EQUALS, rowXpath)
	if (WebUI.waitForElementPresent(rowObjPage2, 5, FailureHandling.OPTIONAL)) {
		safeScrollTo(rowObjPage2)
		found = true
		println("✅ Satır 2. pagination’da bulundu ve scroll yapıldı.")
	} else {
		println("ℹ️ Satır 2. sayfada bulunamadı, 3. sayfaya geçiliyor...")

		TestObject page3Btn = new TestObject()
		page3Btn.addProperty("xpath", ConditionType.EQUALS, "//a[contains(@class,'rounded-md') and text()='3']")
		safeScrollTo(page3Btn)
		WebUI.click(page3Btn)
		WebUI.delay(3)

		TestObject rowObjPage3 = new TestObject()
		rowObjPage3.addProperty("xpath", ConditionType.EQUALS, rowXpath)
		if (WebUI.waitForElementPresent(rowObjPage3, 5, FailureHandling.OPTIONAL)) {
			safeScrollTo(rowObjPage3)
			found = true
			println("✅ Satır 3. pagination’da bulundu ve scroll yapıldı.")
		} else {
			println("ℹ️ Satır 3. sayfada bulunamadı, 4. sayfaya geçiliyor...")

			TestObject page4Btn = new TestObject()
			page4Btn.addProperty("xpath", ConditionType.EQUALS, "//a[contains(@class,'rounded-md') and text()='4']")
			safeScrollTo(page4Btn)
			WebUI.click(page4Btn)
			WebUI.delay(3)

			TestObject rowObjPage4 = new TestObject()
			rowObjPage4.addProperty("xpath", ConditionType.EQUALS, rowXpath)
			if (WebUI.waitForElementPresent(rowObjPage4, 5, FailureHandling.OPTIONAL)) {
				safeScrollTo(rowObjPage4)
				found = true
				println("✅ Satır 4. pagination’da bulundu ve scroll yapıldı.")
			}
		}
	}
}

String statusXpath = "(//a[contains(@href, '" + uniqueId + "')]/ancestor::div[contains(@class, 'grid')]//div[contains(@class, 'col-span-1')]//span)[2]"
TestObject statusObj = new TestObject()
statusObj.addProperty("xpath", ConditionType.EQUALS, statusXpath)
safeScrollTo(statusObj)
WebUI.waitForElementVisible(statusObj, 5)
String statusText = WebUI.getText(statusObj)
println "Status: " + statusText
assert statusText == 'RESOLVED' : "❌ Status 'Resolved' olmadı!"

String unresolveXpath = "//a[contains(@href, '/vulnerability-list/resolve-unresolve/" + uniqueId + "')]"
TestObject unresolveObj = new TestObject()
unresolveObj.addProperty("xpath", ConditionType.EQUALS, unresolveXpath)
safeScrollTo(unresolveObj)
WebUI.findWebElement(unresolveObj, 5).click()

WebUI.click(findTestObject('Object Repository/Vulnerability List/Unresolve'))
WebUI.waitForElementVisible(findTestObject('Object Repository/Vulnerability List/Vulnerability successfully'), 15)
WebUI.click(findTestObject('Object Repository/Threat Actor/Threataa/Page_/Mitre Close'))

safeScrollTo(statusObj)
WebUI.waitForElementVisible(statusObj, 5)
String statusTextAfterUnresolve = WebUI.getText(statusObj)
println "Status after Unresolve: " + statusTextAfterUnresolve
assert statusTextAfterUnresolve == 'UNRESOLVED' : "❌ Status 'Unresolved' olmadı!"

String viewXpath = "//a[contains(@href, '/vulnerability-list/" + uniqueId + "')]"
TestObject viewObj = new TestObject()
viewObj.addProperty("xpath", ConditionType.EQUALS, viewXpath)
safeScrollTo(viewObj)
WebUI.findWebElement(viewObj, 5).click()

WebUI.delay(2)
TestObject nameObj = new TestObject()
nameObj.addProperty("xpath", ConditionType.EQUALS, "//span[@class='break-words' and preceding-sibling::span[contains(text(),'Name')]]")
WebUI.waitForElementVisible(nameObj, 10)
String nameTextFromDetail = WebUI.getText(nameObj).trim()
println "🔍 Arama sırasında kullanılan başlık: " + TitlieText
println "🔍 Detay panelindeki 'Name': " + nameTextFromDetail
assert onlyTitle == nameTextFromDetail : "❌ Name uyuşmuyor! Title: '${onlyTitle}', Detail: '${nameTextFromDetail}'"
WebUI.comment("✅ Detay panelinde görünen 'Name' alanı ile arama sonucu eşleşti.")
WebUI.click(findTestObject('Object Repository/Threat Actor/Threataa/Page_/Mitre Close'))

List<WebElement> resolveLinks = DriverFactory.getWebDriver().findElements(By.xpath("//a[contains(@href, '/vulnerability-list/resolve-unresolve/')]"))
int matchingIndex = -1
for (int i = 0; i < resolveLinks.size(); i++) {
	String href = resolveLinks.get(i).getAttribute("href")
	if (href.contains(uniqueId)) {
		matchingIndex = i
		break
	}
}
if (matchingIndex == -1) {
	KeywordUtil.markFailed("Unique ID içeren resolve link bulunamadı!")
} else {
	List<WebElement> scanDetailLinks = DriverFactory.getWebDriver().findElements(By.xpath("//a[contains(@href, '/riskroute/recon/')]"))
	int xpathIndex = matchingIndex + 1
	if (xpathIndex <= scanDetailLinks.size()) {
		TestObject scanDetailObj = new TestObject()
		scanDetailObj.addProperty("xpath", ConditionType.EQUALS, "(//a[contains(@href, '/riskroute/recon/')])[${xpathIndex}]")
		safeScrollTo(scanDetailObj)
		WebUI.findWebElement(scanDetailObj, 5).click()
	} else {
		KeywordUtil.markFailed("Scan Detail linkleri arasında eşleşen sıra bulunamadı. (Resolve index: " + xpathIndex + ")")
	}
}

TestObject scanHistoryTargetObj = new TestObject()
scanHistoryTargetObj.addProperty("xpath", ConditionType.EQUALS, "//div[contains(@class, 'h-20') and contains(@class, 'rounded-full')]//span")
WebUI.waitForElementVisible(scanHistoryTargetObj, 10)
String scanHistoryTargetText = WebUI.getText(scanHistoryTargetObj).trim()
println "🔍 Scan History Sayfasındaki Target: " + scanHistoryTargetText
println "🔍 Önceki Sayfadaki TargetText: " + TargetText
assert scanHistoryTargetText == TargetText : "❌ Scan History'deki target, beklenenle uyuşmuyor!\nBeklenen: '${TargetText}'\nGelen: '${scanHistoryTargetText}'"
WebUI.comment("✅ Scan Detail sayfasındaki hedef doğru olarak görüntülendi.")
