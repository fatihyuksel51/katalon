import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys
import com.kms.katalon.core.webui.driver.DriverFactory as DriverFactory
import org.openqa.selenium.JavascriptExecutor as JavascriptExecutor
import org.openqa.selenium.WebElement as WebElement
import com.kms.katalon.core.webui.common.WebUiCommonHelper as WebUiCommonHelper
import org.openqa.selenium.WebDriver as WebDriver
import com.kms.katalon.core.testobject.ConditionType
import com.kms.katalon.core.util.KeywordUtil
import org.openqa.selenium.By
import org.openqa.selenium.interactions.Actions
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions



// ‚úÖ Fonksiyon: Scroll edip g√∂r√ºn√ºr hale getir
def scrollToVisible(WebElement element, JavascriptExecutor js) {
	int currentScroll = 0
	boolean isVisible = false
	while (!isVisible && currentScroll < 3000) {
		js.executeScript("window.scrollBy(0, 200)")
		WebUI.delay(0.5)
		isVisible = element.isDisplayed()
		currentScroll += 200
	}
	return isVisible
}

// Tarayƒ±cƒ±yƒ± a√ß ve siteye git
WebUI.openBrowser('')

WebUI.navigateToUrl('https://platform.catchprobe.org/')

WebUI.maximizeWindow()

// Login i≈ülemleri
WebUI.waitForElementVisible(findTestObject('Object Repository/RiskRoute Dashboard/Page_/a_PLATFORM LOGIN'), 30)

WebUI.click(findTestObject('Object Repository/RiskRoute Dashboard/Page_/a_PLATFORM LOGIN'))

WebUI.waitForElementVisible(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Email Address_email'), 30)

WebUI.setText(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Email Address_email'), 'fatih.yuksel@catchprobe.com')

WebUI.setEncryptedText(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Password_password'), 'RigbBhfdqOBDK95asqKeHw==')

WebUI.click(findTestObject('Object Repository/RiskRoute Dashboard/Page_/button_Sign in'))

WebUI.delay(5)

// OTP i≈ülemi
def randomOtp = (100000 + new Random().nextInt(900000)).toString()

WebUI.setText(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_OTP Digit_vi_1_2_3_4_5'), randomOtp)

WebUI.click(findTestObject('Object Repository/RiskRoute Dashboard/Page_/button_Verify'))

WebUI.delay(5)

WebUI.waitForPageLoad(30)

//
// Riskroute sekmesine tƒ±kla
WebUI.navigateToUrl('https://platform.catchprobe.org/riskroute')

WebUI.waitForPageLoad(10)

CustomKeywords.'com.catchprobe.utils.TableUtils.checkForUnexpectedToasts'()

WebUI.delay(3)

WebUI.waitForPageLoad(10)


WebUI.click(findTestObject('Object Repository/Host List/Hosts'))

WebUI.delay(1)

WebUI.click(findTestObject('Object Repository/Vulnerability List/Vulnerabiliy List'))

WebUI.waitForPageLoad(10)

WebDriver driver = DriverFactory.getWebDriver()
JavascriptExecutor js = (JavascriptExecutor) driver
Actions actions = new Actions(driver)

// Sayfa g√ºncellenmesi i√ßin bekle
WebUI.delay(2)



TestObject targetobj = new TestObject()
targetobj.addProperty("xpath", ConditionType.EQUALS, "//div[@class='col-span-4 justify-left text-left flex items-center gap-2 text-sm truncate p-2' and not(contains(text(), 'Title')) and not(contains(text(), 'Vulnerable Url'))]")

WebUI.waitForElementVisible(targetobj, 5)
String TargetText = WebUI.getText(targetobj)
WebUI.delay(2)

TestObject titletobj = new TestObject()
titletobj.addProperty("xpath", ConditionType.EQUALS, "//div[@class='col-span-4 justify-left text-left items-center text-sm truncate p-2 grid grid-cols-1 gap-2']")

WebUI.waitForElementVisible(titletobj, 5)
String TitlieText = WebUI.getText(titletobj)
String onlyTitle = TitlieText.readLines().first()

println "Bulunan ba≈ülƒ±k: " + onlyTitle
WebUI.delay(2)
TestObject VulnerInput = findTestObject('Object Repository/Vulnerability List/Vulnerability ƒ∞nput')

WebUI.click(VulnerInput)
WebUI.delay(1)
WebUI.sendKeys(VulnerInput,onlyTitle )

WebUI.delay(2)

TestObject TargetInput = findTestObject('Object Repository/Vulnerability List/Target ƒ∞nput')

WebUI.click(TargetInput)
WebUI.delay(1)
WebUI.sendKeys(TargetInput,TargetText )
WebUI.delay(2)

WebUI.click(findTestObject('Object Repository/Vulnerability List/button_SEARCH'))
WebUI.delay(2)
WebUI.waitForPageLoad(30)

// Resolve ikonunun elementini bul
TestObject resolveLinkObj = new TestObject()
resolveLinkObj.addProperty("xpath", ConditionType.EQUALS, "(//a[contains(@href, '/vulnerability-list/resolve-unresolve/')])[1]")

WebElement resolveLinkElement = WebUI.findWebElement(resolveLinkObj, 10)

// Href deƒüerini al
String hrefValue = resolveLinkElement.getAttribute("href")
String uniqueId = hrefValue.substring(hrefValue.lastIndexOf("/") + 1)
println "Bulunan e≈üsiz ID: " + uniqueId



// Tƒ±kla
resolveLinkElement.click()

// Create butonuna tƒ±kla
WebUI.click(findTestObject('Object Repository/Host List/Resolve'))

WebUI.waitForElementVisible(findTestObject('Object Repository/Vulnerability List/Vulnerability successfully'), 15)

WebUI.click(findTestObject('Object Repository/Threat Actor/Threataa/Page_/Mitre Close'))




// O e≈üsiz ID‚Äôyi i√ßeren satƒ±rƒ± bul
// O e≈üsiz ID‚Äôyi i√ßeren satƒ±rƒ± bul
String rowXpath = "//a[contains(@href, '" + uniqueId + "')]/ancestor::div[contains(@class, 'grid')]"

// O satƒ±rƒ±n i√ßindeki status text'ini bul
String statusXpath = "(//a[contains(@href, '" + uniqueId + "')]/ancestor::div[contains(@class, 'grid')]//div[contains(@class, 'col-span-1')]//span)[2]"

// TestObject olu≈ütur
TestObject statusObj = new TestObject()
statusObj.addProperty("xpath", ConditionType.EQUALS, statusXpath)

// WebElement √ßek
WebElement statusElem = WebUI.findWebElement(statusObj, 5)

// Scroll into view

js.executeScript("arguments[0].scrollIntoView(true);", statusElem)

// Element g√∂r√ºn√ºr olana kadar bekle
WebUI.waitForElementVisible(statusObj, 5)

// Text‚Äôini al
String statusText = WebUI.getText(statusObj)
println "Status: " + statusText

// Assert kontrol
assert statusText == 'RESOLVED' : "‚ùå Status 'Resolved' olmadƒ±!"

// ‚úÖ Unresolve butonunun xpath'ini olu≈ütur
String unresolveXpath = "//a[contains(@href, '/vulnerability-list/resolve-unresolve/" + uniqueId + "')]"

// TestObject olu≈ütur
TestObject unresolveObj = new TestObject()
unresolveObj.addProperty("xpath", ConditionType.EQUALS, unresolveXpath)

// WebElement √ßek
WebElement unresolveElem = WebUI.findWebElement(unresolveObj, 5)

// Scroll into view
js.executeScript("arguments[0].scrollIntoView(true);", unresolveElem)

// Butona tƒ±kla
unresolveElem.click()

// Create butonuna tƒ±kla
WebUI.click(findTestObject('Object Repository/Vulnerability List/Unresolve'))

WebUI.waitForElementVisible(findTestObject('Object Repository/Vulnerability List/Vulnerability successfully'), 15)

WebUI.click(findTestObject('Object Repository/Threat Actor/Threataa/Page_/Mitre Close'))

// ƒ∞≈ülem sonrasƒ± toast varsa kontrol et ‚Äî senin custom keyword varsa burada √ßaƒüƒ±rabilirsin
// CustomKeywords.'com.catchprobe.utils.TableUtils.checkForUnexpectedToasts'()

// Sayfa g√ºncellenmesi i√ßin bekle
WebUI.delay(2)
WebUI.waitForPageLoad(30)

// Status'√º tekrar oku
// Aynƒ± statusObj kullanƒ±labilir √ß√ºnk√º xpath aynƒ± satƒ±rdaki status alanƒ±nƒ± i≈üaret ediyor

// Scroll into view
statusElem = WebUI.findWebElement(statusObj, 5)
js.executeScript("arguments[0].scrollIntoView(true);", statusElem)

// Element g√∂r√ºn√ºr olana kadar bekle
WebUI.waitForElementVisible(statusObj, 5)

// Text‚Äôini al
String statusTextAfterUnresolve = WebUI.getText(statusObj)
println "Status after Unresolve: " + statusTextAfterUnresolve

// Assert kontrol
assert statusTextAfterUnresolve == 'UNRESOLVED' : "‚ùå Status 'Unresolved' olmadƒ±!"

// G√∂z butonunun XPath‚Äôini olu≈ütur
String viewXpath = "//a[contains(@href, '/vulnerability-list/" + uniqueId + "')]"

// TestObject olu≈ütur
TestObject viewObj = new TestObject()
viewObj.addProperty("xpath", ConditionType.EQUALS, viewXpath)

// WebElement √ßek
WebElement viewElem = WebUI.findWebElement(viewObj, 5)

// Scroll into view
js.executeScript("arguments[0].scrollIntoView(true);", viewElem)

// Butona tƒ±kla
viewElem.click()

WebUI.delay(2)
// üëÅ G√∂z butonuna tƒ±kladƒ±ktan sonra detay paneli gelir, o panelden "Name" alanƒ±nƒ± al
TestObject nameObj = new TestObject()
nameObj.addProperty("xpath", ConditionType.EQUALS, "//span[@class='break-words' and preceding-sibling::span[contains(text(),'Name')]]")

WebUI.waitForElementVisible(nameObj, 10)
String nameTextFromDetail = WebUI.getText(nameObj).trim()

// √ñnceden alƒ±nan ba≈ülƒ±k ile kar≈üƒ±la≈ütƒ±r
println "üîç Arama sƒ±rasƒ±nda kullanƒ±lan ba≈ülƒ±k: " + TitlieText
println "üîç Detay panelindeki 'Name': " + nameTextFromDetail

assert onlyTitle == nameTextFromDetail : "‚ùå Name uyu≈ümuyor! Title: '${onlyTitle}', Detail: '${nameTextFromDetail}'"
WebUI.comment("‚úÖ Detay panelinde g√∂r√ºnen 'Name' alanƒ± ile arama sonucu e≈üle≈üti.")


WebUI.click(findTestObject('Object Repository/Threat Actor/Threataa/Page_/Mitre Close'))

WebUI.comment("‚úÖ G√∂z butonuna tƒ±klandƒ± ve kapatƒ±ldƒ±: /vulnerability-list/" + uniqueId)

// Saat (Go Scan Detail) butonunun XPath‚Äôini olu≈ütur
String scanDetailXpath = "(//a[contains(@href, '/riskroute/recon/')])[2]"


// TestObject olu≈ütur
TestObject scanDetailObj = new TestObject()
scanDetailObj.addProperty("xpath", ConditionType.EQUALS, "(//a[contains(@href, '/riskroute/recon/')])[2]")

// WebElement √ßek
WebElement scanDetailElem = WebUI.findWebElement(scanDetailObj, 5)

// Scroll into view
js.executeScript("arguments[0].scrollIntoView(true);", scanDetailElem)

/// Saat (Scan Detail) butonuna tƒ±kla
scanDetailElem.click()

// Sayfanƒ±n y√ºklenmesini bekle
WebUI.delay(3)

// Scan History sayfasƒ±ndaki target deƒüerini kontrol et
TestObject scanHistoryTargetObj = new TestObject()
scanHistoryTargetObj.addProperty("xpath", ConditionType.EQUALS, "//div[contains(@class, 'h-20') and contains(@class, 'rounded-full')]//span")

WebUI.waitForElementVisible(scanHistoryTargetObj, 10)

String scanHistoryTargetText = WebUI.getText(scanHistoryTargetObj).trim()
println "üîç Scan History Sayfasƒ±ndaki Target: " + scanHistoryTargetText
println "üîç √ñnceki Sayfadaki TargetText: " + TargetText

// Kar≈üƒ±la≈ütƒ±rma
assert scanHistoryTargetText == TargetText : "‚ùå Scan History'deki target, beklenenle uyu≈ümuyor!\nBeklenen: '${TargetText}'\nGelen: '${scanHistoryTargetText}'"
WebUI.comment("‚úÖ Scan Detail sayfasƒ±ndaki hedef doƒüru olarak g√∂r√ºnt√ºlendi.")




