import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys
import com.kms.katalon.core.webui.driver.DriverFactory as DriverFactory
import org.openqa.selenium.JavascriptExecutor as JavascriptExecutor
import org.openqa.selenium.WebElement as WebElement
import com.kms.katalon.core.webui.common.WebUiCommonHelper as WebUiCommonHelper
import org.openqa.selenium.WebDriver as WebDriver
import com.kms.katalon.core.testobject.ConditionType as ConditionType
import com.kms.katalon.core.util.KeywordUtil as KeywordUtil
import org.openqa.selenium.By as By
import org.openqa.selenium.interactions.Actions as Actions
import org.openqa.selenium.support.ui.WebDriverWait as WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions as ExpectedConditions
import com.catchprobe.utils.MailReader as MailReader
import static com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords.*
import java.text.SimpleDateFormat

/*/ ‚úÖ G√ºvenli scroll fonksiyonu

WebUI.openBrowser('')

WebUI.navigateToUrl('https://platform.catchprobe.io/')

WebUI.maximizeWindow()

WebUI.waitForElementVisible(findTestObject('Object Repository/RiskRoute Dashboard/Page_/a_PLATFORM LOGIN'), 30)

safeScrollTo(findTestObject('Object Repository/RiskRoute Dashboard/Page_/a_PLATFORM LOGIN'))

WebUI.click(findTestObject('Object Repository/RiskRoute Dashboard/Page_/a_PLATFORM LOGIN'))

WebUI.waitForElementVisible(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Email Address_email'), 30)

safeScrollTo(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Email Address_email'))

WebUI.setText(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Email Address_email'), 'fatih@test.com')

safeScrollTo(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Password_password'))

WebUI.setEncryptedText(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Password_password'), 'v4yvAQ7Q279BF5ny4hDiTA==')

safeScrollTo(findTestObject('Object Repository/RiskRoute Dashboard/Page_/button_Sign in'))

WebUI.click(findTestObject('Object Repository/RiskRoute Dashboard/Page_/button_Sign in'))

WebUI.delay(5)

String randomOtp = (100000 + new Random().nextInt(900000)).toString()

safeScrollTo(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_OTP Digit_vi_1_2_3_4_5'))

WebUI.setText(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_OTP Digit_vi_1_2_3_4_5'), randomOtp)

safeScrollTo(findTestObject('Object Repository/RiskRoute Dashboard/Page_/button_Verify'))

WebUI.click(findTestObject('Object Repository/RiskRoute Dashboard/Page_/button_Verify'))

WebUI.delay(5)

WebUI.waitForPageLoad(10)

// 1. Sayfa y√ºklendikten sonra mevcut organizasyonu oku
TestObject currentOrg = new TestObject()
currentOrg.addProperty("xpath", ConditionType.EQUALS, "//div[contains(@class, 'font-semibold') and contains(text(), 'Organization')]//span[@class='font-thin']")

String currentOrgText = WebUI.getText(currentOrg)

// 2. Kontrol et: Eƒüer zaten TEST COMPANY ise hi√ßbir ≈üey yapma
if (currentOrgText != 'TEST COMPANY') {
	// 3. Organization butonuna tƒ±kla
	TestObject orgButton = new TestObject()
	orgButton.addProperty("xpath", ConditionType.EQUALS, "//button[.//div[contains(text(), 'Organization :')]]")
	WebUI.click(orgButton)

	// 4. TEST COMPANY se√ßeneƒüine tƒ±kla
	TestObject testCompanyOption = new TestObject()
	testCompanyOption.addProperty("xpath", ConditionType.EQUALS, "//button[.//div[text()='TEST COMPANY']]")
	WebUI.click(testCompanyOption)
}
WebUI.waitForPageLoad(10)
/*/

WebUI.navigateToUrl('https://platform.catchprobe.io/smartdeceptive/pcap-list')

WebUI.delay(5) 
WebUI.waitForPageLoad(10)

// üî• 
pcaplistTest()


void pcaplistTest() {
    // üîπ ƒ∞lk satƒ±r verilerini al
	TestObject attackNameObj = makeXpathObj("(.//td[contains(@class, 'ant-table-cell')])[1]")
	TestObject filenameObj  = makeXpathObj("(.//td[contains(@class, 'ant-table-cell')])[2]")
	TestObject timeStampObj  = makeXpathObj("(.//td[contains(@class, 'ant-table-cell')])[4]")

	safeScrollTo(attackNameObj)
	String attackName = WebUI.getText(attackNameObj)

	safeScrollTo(filenameObj)
	String ipAddress = WebUI.getText(filenameObj)

	safeScrollTo(timeStampObj)
	String timeStamp = WebUI.getText(timeStampObj)

	WebUI.comment("üîç AttackName: ${attackName}, IP: ${ipAddress}, Timestamp: ${timeStamp}")


    // üîπ Timestamp kontrol
    String today = new SimpleDateFormat("yyyy-MM-dd").format(new Date())
   Date parsedTimestamp = new SimpleDateFormat("dd/MM/yyyy HH:mm").parse(timeStamp)
   String formattedTimestamp = new SimpleDateFormat("yyyy-MM-dd").format(parsedTimestamp)

   assert formattedTimestamp == today

    /*/ üîπ Filter Options i≈ülemleri
    safeScrollTo(makeXpathObj("//div[text()='FILTER OPTIONS']"))
    WebUI.click(makeXpathObj("//div[text()='FILTER OPTIONS']"))
	WebUI.delay(4)

    safeScrollTo(makeXpathObj("(//button[@role='combobox'])[5]"))
    WebUI.click(makeXpathObj("(//button[@role='combobox'])[5]"))
	safeScrollTo(makeXpathObj("//option[text()='Ascending']"))
	 WebUI.click(makeXpathObj("//option[text()='Ascending']"))
	

     safeScrollTo(makeXpathObj("(//button[@role='combobox'])[6]"))
    WebUI.click(makeXpathObj("(//button[@role='combobox'])[6]"))
	safeScrollTo(makeXpathObj("//option[text()='Date']"))
    WebUI.click(makeXpathObj("//option[text()='Date']"))

    WebUI.click(makeXpathObj("//button[normalize-space(text())='APPLY AND SEARCH']"))
	/*/

    // üîπ Tarih kar≈üƒ±la≈ütƒ±rmasƒ±
   String sortedTime = WebUI.getText(makeXpathObj("(.//td[contains(@class, 'ant-table-cell')])[4]"))

   // dd/MM/yyyy HH:mm formatlƒ± iki stringi Date'e √ßevir
   SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm")
   Date sortedDate = sdf.parse(sortedTime)
   Date originalDate = sdf.parse(timeStamp)

   // Kar≈üƒ±la≈ütƒ±rmayƒ± yap
  // assert sortedDate.before(originalDate)

    // üîπ Pagination ile sayfa ge√ßi≈üi ve signature kontrol√º
    List<String> pageNumbers = ['2','3','4','5']
    for (String pageNum : pageNumbers) {
        try {
            TestObject pageLink = makeXpathObj("//a[text()='" + pageNum + "']")
            scrollToBottom()
            WebUI.delay(2)
            WebUI.click(pageLink)
            WebUI.delay(2)
        } catch (Exception e) {
            WebUI.comment("‚ö†Ô∏è Sayfa ${pageNum} tƒ±klanamadƒ±: ${e.message}")
        }
    }

  // üîπ 3. sayfadaki ilk IP ve attack name‚Äôi al
TestObject filename = makeXpathObj("(.//td[contains(@class, 'ant-table-cell')])[1]")
TestObject UsernameKeyword = makeXpathObj("(.//td[contains(@class, 'ant-table-cell')])[2]")

safeScrollTo(filename)
String page3Ip2 = WebUI.getText(filename)
String page3Ip = page3Ip2.split("-")[-1]  
println ("üü¢ Honeypoot Name: " + page3Ip)

safeScrollTo(UsernameKeyword)
String page3AttackName = WebUI.getText(UsernameKeyword)

WebUI.comment("üìã Alƒ±nan deƒüerler ‚Äì IP: ${page3Ip}, AttackName: ${page3AttackName}")

// üîπ IP filtresi (Combobox'a scroll ve se√ßim)
safeScrollTo(makeXpathObj("//div[text()='FILTER OPTIONS']"))
WebUI.click(makeXpathObj("//div[text()='FILTER OPTIONS']"))
WebUI.delay(4)
/*/
TestObject ipComboBox = makeXpathObj("(//button[@role='combobox'])[2]")

safeScrollTo(ipComboBox)
WebUI.click(ipComboBox)

TestObject ipInput = makeXpathObj("//input[@role='combobox' and @type='text']")
safeScrollTo(ipInput)
WebUI.setText(ipInput, page3Ip)
WebUI.sendKeys(ipInput, Keys.chord(Keys.ENTER)) // dropdown kapanmasƒ± i√ßin
/*/

// üîπ Attack Name (keyword input)
TestObject keywordInput = makeXpathObj("(//input[@type='text' and not(@role='combobox')])[1]") // sade text input
safeScrollTo(keywordInput)
if (page3Ip == null || page3AttackName.trim().toLowerCase() == "n/a") {
    WebUI.setText(keywordInput, "")
} else {
    WebUI.setText(keywordInput, page3Ip)
}

// üîπ Apply & Search
TestObject applyButton = makeXpathObj("//button[normalize-space(text())='APPLY AND SEARCH']")
safeScrollTo(applyButton)
WebUI.click(applyButton)
WebUI.delay(2)
/*/

TestObject View = makeXpathObj("(.//td[contains(@class, 'ant-table-cell')])[7]")

safeScrollTo(View)
WebUI.click(View)
WebUI.delay(2)

// ‚úÖ A√ßƒ±lan ilk input alanƒ±nƒ± bul
TestObject viewField = new TestObject("viewField")
viewField.addProperty("xpath", ConditionType.EQUALS, "(//div[contains(@class, 'mb-1') and contains(@class, 'font-semibold') and contains(@class, 'text-muted-foreground')]/following-sibling::div[1])[5]")

if (WebUI.verifyElementPresent(viewField, 2, FailureHandling.OPTIONAL)) {
	String ViewValue = WebUI.getText(viewField)
	println("üü¢ View Deƒüeri: " + ViewValue)

	if (page3AttackName.contains(ViewValue)) {
		KeywordUtil.logInfo("‚úÖ Message ile Attackname deƒüeri e≈üle≈üiyor.")
	} else {
		KeywordUtil.markWarning("‚ùå Message ile Attack name deƒüeri e≈üle≈ümiyor!\nAttackname: ${page3AttackName}\nMessage: ${ViewValue}")
	}
} else {
	KeywordUtil.markWarning("‚ùå A√ßƒ±lan saydafa Mesaj alanƒ± bulunamadƒ±!")
}
WebUI.delay(2)
WebUI.click(findTestObject('Object Repository/Threat Actor/Threataa/Page_/Mitre Close'))
/*/

safeScrollTo(filename)
WebUI.click(filename)
WebUI.delay(4)
WebUI.waitForPageLoad(10)

// ‚úÖ A√ßƒ±lan ilk input alanƒ±nƒ± bul
TestObject inputField = new TestObject("inputField")
inputField.addProperty("xpath", ConditionType.EQUALS, "(.//td[contains(@class, 'ant-table-cell')])[1]")

if (WebUI.verifyElementPresent(inputField, 2, FailureHandling.OPTIONAL)) {
	String inputValue = WebUI.getText(inputField)
	println("üü¢ File Name: " + inputValue)

	if (page3Ip2.contains(inputValue)) {
		KeywordUtil.logInfo("‚úÖ File Name ile input deƒüeri e≈üle≈üiyor.")
	} else {
		KeywordUtil.markWarning("‚ùå File Name ile input deƒüeri e≈üle≈ümiyor!\nTooltip: ${page3Ip}\nInput: ${inputValue}")
	}
} else {
	KeywordUtil.markWarning("‚ùå A√ßƒ±lan input alanƒ± bulunamadƒ±!")
}

WebUI.comment("‚úÖ Filtreleme tamamlandƒ±: IP '${page3Ip}', AttackName '${page3AttackName}'")

}

// Yardƒ±mcƒ± fonksiyonlar
TestObject makeXpathObj(String xpath) {
	TestObject to = new TestObject()
	to.addProperty("xpath", ConditionType.EQUALS, xpath)
	return to
}

WebElement safeScrollTo(TestObject to) {
	if (to == null || !WebUI.waitForElementPresent(to, 2)) {
		KeywordUtil.markFailed("‚ùå Scroll edilemedi: ${to.getObjectId()}")
		return null
	}
	WebElement element = WebUiCommonHelper.findWebElement(to, 2)
	JavascriptExecutor js = (JavascriptExecutor) DriverFactory.getWebDriver()
	js.executeScript("arguments[0].scrollIntoView({block: 'center'});", element)
	WebUI.delay(0.5)
	return element
}

void scrollToBottom() {
	JavascriptExecutor js = (JavascriptExecutor) DriverFactory.getWebDriver()
	js.executeScript("window.scrollTo(0, document.body.scrollHeight)")
}

