import com.kms.katalon.core.webui.common.WebUiCommonHelper as WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory as DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.util.KeywordUtil as KeywordUtil
import com.kms.katalon.core.testobject.ConditionType
import com.kms.katalon.core.testobject.TestObject
import org.openqa.selenium.WebElement
import org.openqa.selenium.JavascriptExecutor
import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys
import com.kms.katalon.core.webui.driver.DriverFactory as DriverFactory
import org.openqa.selenium.JavascriptExecutor as JavascriptExecutor
import org.openqa.selenium.WebElement as WebElement
import com.kms.katalon.core.webui.common.WebUiCommonHelper as WebUiCommonHelper
import org.openqa.selenium.WebDriver as WebDriver
import com.kms.katalon.core.testobject.ConditionType
import com.kms.katalon.core.util.KeywordUtil
import org.openqa.selenium.By
import org.openqa.selenium.interactions.Actions
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.Keys
import org.openqa.selenium.WebElement

import com.kms.katalon.core.testobject.TestObject
import com.kms.katalon.core.testobject.ConditionType
import com.kms.katalon.core.util.KeywordUtil
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.webui.common.WebUiCommonHelper as WebUiCommonHelper
import java.text.SimpleDateFormat

TestObject X(String xp) {
    TestObject to = new TestObject(xp)
    to.addProperty("xpath", ConditionType.EQUALS, xp)
    return to
}
WebElement safeScrollTo(TestObject to) {
	if (to == null || !WebUI.waitForElementPresent(to, 1)) {
		KeywordUtil.markFailed("‚ùå Scroll edilemedi: ${to.getObjectId()}")
		return null
	}
	WebElement element = WebUiCommonHelper.findWebElement(to, 1)
	JavascriptExecutor js = (JavascriptExecutor) DriverFactory.getWebDriver()
	js.executeScript("arguments[0].scrollIntoView({block: 'center'});", element)
	WebUI.delay(0.5)
	return element
}

boolean isBrowserOpen() {
    try { DriverFactory.getWebDriver(); return true } catch(Throwable t){ return false }
}

void ensureSession() {
    if (isBrowserOpen()) return
    WebUI.openBrowser('')
    WebUI.maximizeWindow()
    WebUI.navigateToUrl('https://platform.catchprobe.io/')

    WebUI.waitForElementVisible(findTestObject('Object Repository/RiskRoute Dashboard/Page_/a_PLATFORM LOGIN'), 30)
    WebUI.click(findTestObject('Object Repository/RiskRoute Dashboard/Page_/a_PLATFORM LOGIN'))

    WebUI.waitForElementVisible(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Email Address_email'), 30)
    WebUI.setText(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Email Address_email'), 'fatih@test.com')
    WebUI.setEncryptedText(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Password_password'), 'v4yvAQ7Q279BF5ny4hDiTA==')
    WebUI.click(findTestObject('Object Repository/RiskRoute Dashboard/Page_/button_Sign in'))

    WebUI.delay(3)
    String otp = (100000 + new Random().nextInt(900000)).toString()
    WebUI.setText(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_OTP Digit_vi_1_2_3_4_5'), otp)
    WebUI.click(findTestObject('Object Repository/RiskRoute Dashboard/Page_/button_Verify'))
    WebUI.delay(2)

    WebUI.waitForElementVisible(X("//span[text()='Threat']"), 10, FailureHandling.OPTIONAL)
}



ensureSession()

WebUI.navigateToUrl('https://platform.catchprobe.io/smartdeceptive')

WebUI.delay(3)
WebUI.waitForPageLoad(10)
// WebDriver ve JS tanƒ±mla
WebDriver driver = DriverFactory.getWebDriver()
JavascriptExecutor js = (JavascriptExecutor) driver



// ‚úÖ 1. Most Bar √ßubuƒüu tanƒ±mƒ±
TestObject bar = new TestObject("firstBar")
bar.addProperty("xpath", ConditionType.EQUALS, "(//*[name()='path' and contains(@class, 'apexcharts-bar-area') and @index='0'])[1]")

if (WebUI.verifyElementPresent(bar, 10, FailureHandling.OPTIONAL)) {
	WebElement barElement = safeScrollTo(bar)
	if (barElement == null) {
		KeywordUtil.markWarning("‚ùå Scroll sonrasƒ± bar elementi bulunamadƒ±!")
	}
	
	WebUI.waitForElementPresent(bar, 5)
	WebElement barElem = WebUiCommonHelper.findWebElement(bar, 5)
	String countVal = barElem.getAttribute("val")
	println("üìä Bar √ºzerindeki Count: " + countVal)

	// ‚úÖ Mouse over ile tooltip'i tetikle
	WebUI.mouseOver(bar)
	WebUI.delay(1)

	// ‚úÖ Tooltip g√∂r√ºnene kadar dene
	TestObject tooltipIpObj = new TestObject()
	tooltipIpObj.addProperty("xpath", ConditionType.EQUALS,
    "//div[contains(@class, 'apexcharts-tooltip')]//div[contains(text(), '.') or contains(text(), ':')]")

	WebUI.waitForElementVisible(tooltipIpObj, 5)
	String tooltipText = WebUI.getText(tooltipIpObj).trim()
	println("üìå Tooltip‚Äôteki IP: " + tooltipText)

	if (!tooltipText?.trim()) {
		KeywordUtil.markWarning("‚ùå Tooltip i√ßeriƒüi alƒ±namadƒ±!")
	}

	println("üü¢ Tooltip Text: " + tooltipText)

	// ‚úÖ Bar'a tƒ±kla
	WebUI.click(bar)
	WebUI.delay(1)

	// ‚úÖ A√ßƒ±lan ilk input alanƒ±nƒ± bul
	TestObject inputField = new TestObject("inputField")
	inputField.addProperty("xpath", ConditionType.EQUALS, "//input[contains(@class, 'rounded-md') and contains(@class, 'border-input')]")

	if (WebUI.verifyElementPresent(inputField, 5, FailureHandling.OPTIONAL)) {
		String inputValue = WebUI.getAttribute(inputField, "value").trim()
		println("üü¢ Input Deƒüeri: " + inputValue)

		if (tooltipText.contains(inputValue)) {
			KeywordUtil.logInfo("‚úÖ Tooltip ile input deƒüeri e≈üle≈üiyor.")
		} else {
			KeywordUtil.markWarning("‚ùå Tooltip ile input deƒüeri e≈üle≈ümiyor!\nTooltip: ${tooltipText}\nInput: ${inputValue}")
		}
	} else {
		KeywordUtil.markWarning("‚ùå A√ßƒ±lan input alanƒ± bulunamadƒ±!")
	}
} else {
	KeywordUtil.markWarning("‚ùå ƒ∞lk bar path elementi bulunamadƒ±!")
}
WebUI.delay(2)
WebUI.click(findTestObject('Object Repository/Threat Actor/Threataa/Page_/Mitre Close'))

/*/ ‚úÖ 1. Most Used Proxy Bar √ßubuƒüu tanƒ±mƒ±
TestObject mostUsedProxyBar = new TestObject("mostUsedProxyBar")
mostUsedProxyBar.addProperty("xpath", ConditionType.EQUALS,
	"(//*[name()='g' and contains(@class,'apexcharts-series') and @seriesName='AttackxCount']" +
	"//*[name()='path' and contains(@class,'apexcharts-bar-area') and @j='0'])[1]"
)

if (WebUI.verifyElementPresent(mostUsedProxyBar, 10, FailureHandling.OPTIONAL)) {
	WebElement barElement = safeScrollTo(mostUsedProxyBar)
	if (barElement == null) {
		KeywordUtil.markWarning("‚ùå Scroll sonrasƒ± mostUsedProxyBar elementi bulunamadƒ±!")
	}

	WebUI.waitForElementPresent(mostUsedProxyBar, 5)
	WebElement barElem = WebUiCommonHelper.findWebElement(mostUsedProxyBar, 5)
	String countVal = barElem.getAttribute("val")
	println("üìä Most Used Proxy Bar √ºzerindeki Count: " + countVal)

	// ‚úÖ Mouse over ile tooltip'i tetikle
	WebUI.mouseOver(mostUsedProxyBar)
	WebUI.delay(1)

	// ‚úÖ Tooltip g√∂r√ºnene kadar dene
	TestObject tooltipProxyObj = new TestObject("tooltipProxy")
	tooltipProxyObj.addProperty("xpath", ConditionType.EQUALS,
		"//div[contains(@class, 'apexcharts-tooltip')]//div[contains(text(), '.') or contains(text(), ':')]"
	)

	WebUI.waitForElementVisible(tooltipProxyObj, 5)
	String tooltipText = WebUI.getText(tooltipProxyObj).trim()
	println("üìå Tooltip‚Äôteki Proxy/IP: " + tooltipText)

	if (!tooltipText?.trim()) {
		KeywordUtil.markWarning("‚ùå Tooltip i√ßeriƒüi alƒ±namadƒ±!")
	}

	println("üü¢ Tooltip Text: " + tooltipText)

	// ‚úÖ Bar'a tƒ±kla
	WebUI.click(mostUsedProxyBar)
	WebUI.delay(1)

	// ‚úÖ A√ßƒ±lan ilk input alanƒ±nƒ± bul
	TestObject inputField = new TestObject("inputField")
	inputField.addProperty("xpath", ConditionType.EQUALS,
		"//input[contains(@class, 'rounded-md') and contains(@class, 'border-input')]"
	)

	if (WebUI.verifyElementPresent(inputField, 5, FailureHandling.OPTIONAL)) {
		String inputValue = WebUI.getAttribute(inputField, "value").trim()
		println("üü¢ Input Deƒüeri: " + inputValue)

		if (tooltipText.contains(inputValue)) {
			KeywordUtil.logInfo("‚úÖ Tooltip ile input deƒüeri e≈üle≈üiyor.")
		} else {
			KeywordUtil.markWarning("‚ùå Tooltip ile input deƒüeri e≈üle≈ümiyor!\nTooltip: ${tooltipText}\nInput: ${inputValue}")
		}
	} else {
		KeywordUtil.markWarning("‚ùå A√ßƒ±lan input alanƒ± bulunamadƒ±!")
	}
} else {
	KeywordUtil.markWarning("‚ùå Most Used Proxy bar path elementi bulunamadƒ±!")
}

WebUI.delay(2)
WebUI.click(findTestObject('Object Repository/Threat Actor/Threataa/Page_/Mitre Close'))
/*/

WebUI.comment("--- Starting Asset Detail (MySQL Server) Pagination Test ---")

// Scroll to Asset Detail graph for MySQL Server
WebElement assetDetailGraphElementMysql = WebUiCommonHelper.findWebElement(
    findTestObject('Object Repository/Smartdeceptive/Page_/Dashboard-UsedTecniques'), 20)

if (scrollToVisible(assetDetailGraphElementMysql, js)) {
    js.executeScript("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", assetDetailGraphElementMysql)
    WebUI.comment("üëâ 'Asset Detail' grafiƒüine ba≈üarƒ±yla scroll yapƒ±ldƒ± (MySQL Server).")
    WebUI.delay(1)
} else {
    WebUI.comment("‚ùå 'Asset Detail' grafiƒüi g√∂r√ºn√ºr deƒüil, scroll ba≈üarƒ±sƒ±z (MySQL Server).")
}

// ---- Doƒürudan <path> slice'ƒ± hedefle ----
// Not: j='3' ve/veya donut-slice-3 sƒ±nƒ±fƒ± MySQL slice'a kar≈üƒ±lƒ±k geliyor (ekranda g√∂rd√ºƒü√ºnle uyumlu).
TestObject mysqlSliceTO = new TestObject("mysqlSliceTO")
mysqlSliceTO.addProperty("xpath", ConditionType.EQUALS,
  // seriesName ile grubu sabitle, i√ßindeki path'i al
  "//*[local-name()='g' and contains(@class,'apexcharts-pie-series')" +
  "   and contains(translate(@seriesName,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ'),'APP-DETECT')]" +
  "//*/self::*[local-name()='path' and contains(@class,'apexcharts-pie-area') and (@j='3' or contains(@class,'apexcharts-donut-slice'))]"
)

// WebElement'i al
WebElement mysqlSliceEl = WebUiCommonHelper.findWebElement(mysqlSliceTO, 10)

// ---- data:value'ƒ± JS ile oku (getAttribute yerine) ----
String dataValueStrMysql = WebUI.executeJavaScript(
    "return arguments[0].getAttribute('data:value') || arguments[0].getAttribute('data-value');",
    [mysqlSliceEl]
) as String

KeywordUtil.logInfo("Bulunan data:value (MySQL) = " + dataValueStrMysql)

// G√ºvenli parse
int dataValueMysql = 0
try {
    dataValueMysql = Integer.parseInt((dataValueStrMysql ?: "0").trim())
} catch (Exception e) {
    KeywordUtil.markWarning("data:value sayƒ± deƒüil veya okunamadƒ±: " + dataValueStrMysql)
}

if (dataValueMysql > 0) {
    // Slice'a tƒ±kla (gerekirse JS fallback)
    try {
        mysqlSliceEl.click()
    } catch (Exception e) {
        WebUI.executeJavaScript("arguments[0].click();", [mysqlSliceEl])
    }
    WebUI.delay(3) // yeni sayfa/y√ºkleme

    // Beklenen sayfa sayƒ±sƒ± (10 kayƒ±t/sayfa varsayƒ±mƒ±)
    int expectedPageCountMysql = (int) Math.ceil(dataValueMysql / 10.0)
    println("üéØ Beklenen pagination sayƒ±sƒ± (MySQL - 10 kayƒ±t/sayfa): " + expectedPageCountMysql)

    // Pagination linkleri
    TestObject pageNumberLinksMysql = new TestObject("pageNumberLinksMysql")
    pageNumberLinksMysql.addProperty("xpath", ConditionType.EQUALS,
        "//ul[contains(@class,'flex')]/li[a[not(contains(@aria-label,'previous')) and not(contains(@aria-label,'next'))]]/a")

    List<WebElement> visiblePageNumberElementsMysql = WebUiCommonHelper.findWebElements(pageNumberLinksMysql, 10)

    // Pagination'a in
    if (!visiblePageNumberElementsMysql.isEmpty()) {
        scrollToVisible(visiblePageNumberElementsMysql.get(0), js)
        js.executeScript("window.scrollTo(0, document.body.scrollHeight)")
        WebUI.delay(1)
    }

    int actualLastPageNumberMysql = 0
    for (WebElement pageElement : visiblePageNumberElementsMysql) {
        String pageText = pageElement.getText().trim()
        if (pageText.matches("\\d+")) {
            actualLastPageNumberMysql = Math.max(actualLastPageNumberMysql, Integer.parseInt(pageText))
        }
    }

    println("üî¢ Ger√ßek son pagination numarasƒ± (MySQL): " + actualLastPageNumberMysql)
    // WebUI.verifyEqual(actualLastPageNumberMysql, expectedPageCountMysql)

} else {
    WebUI.comment("‚ùó Test atlandƒ± √ß√ºnk√º data:value (MySQL) 0/bo≈ü: " + dataValueMysql)
}

WebUI.back()
WebUI.delay(3)
WebUI.waitForPageLoad(30)
WebUI.comment("--- Finished Asset Detail (MySQL Server) Pagination Test ---")


// ‚úÖ 1. BadreputaionBar √ßubuƒüu tanƒ±mƒ± (Attackxcount - j=0)
TestObject badReputationBar = new TestObject("badReputationBar")
badReputationBar.addProperty("xpath", ConditionType.EQUALS,
	"(//*[name()='g' and contains(@class,'apexcharts-series') and @seriesName='Attackxcount']" +
	"//*[name()='path' and contains(@class,'apexcharts-bar-area') and @j='0'])[1]")

if (WebUI.verifyElementPresent(badReputationBar, 10, FailureHandling.OPTIONAL)) {
	WebElement barElement = safeScrollTo(badReputationBar)
	if (barElement == null) {
		KeywordUtil.markWarning("‚ùå Scroll sonrasƒ± badReputationBar elementi bulunamadƒ±!")
	}

	WebUI.waitForElementPresent(badReputationBar, 5)
	WebElement barElem = WebUiCommonHelper.findWebElement(badReputationBar, 5)
	String countVal = barElem.getAttribute("val")
	println("üìä badReputationBar √ºzerindeki Count: " + countVal)
	int dataValueIp = countVal.toInteger()
	
	if (dataValueIp > 0) {
		WebUI.delay(3) // Sayfa y√ºklenmesi i√ßin bekle
		
		// ‚úÖ Mouse over ile tooltip'i tetikle
		WebUI.mouseOver(badReputationBar)
		WebUI.delay(1)
	
		// ‚úÖ Tooltip g√∂r√ºnene kadar dene
		TestObject tooltipIpObj = new TestObject("tooltipIp")
		tooltipIpObj.addProperty("xpath", ConditionType.EQUALS,
			"//div[contains(@class, 'apexcharts-tooltip')]" +
			"//div[contains(text(), '.') or contains(text(), ':')]"
		)
	
		WebUI.waitForElementVisible(tooltipIpObj, 5)
		String tooltipText = WebUI.getText(tooltipIpObj).trim()
		println("üìå Tooltip‚Äôteki IP: " + tooltipText)
	
		if (!tooltipText) {
			KeywordUtil.markWarning("‚ùå Tooltip i√ßeriƒüi alƒ±namadƒ±!")
		}
	
		println("üü¢ Tooltip Text: " + tooltipText)
	
		// ‚úÖ Bar'a tƒ±kla
	WebUI.click(badReputationBar)
	WebUI.delay(3)	
		

	// Beklenen sayfa sayƒ±sƒ±nƒ± hesapla (10 kayƒ±t/sayfa)
	int expectedPageCountIp = (int) Math.ceil(dataValueIp / 10.0)
	println("üéØ Beklenen sayfa sayƒ±sƒ± (IP - 10 kayƒ±t/sayfa): " + expectedPageCountIp)
		
	WebUI.waitForPageLoad(10)		
	js.executeScript("window.scrollTo(0, document.body.scrollHeight)")

	// Sayfa numaralarƒ±nƒ± bul
	TestObject pageNumberLinksIp = new TestObject("pageNumberLinksIp")
		pageNumberLinksIp.addProperty("xpath", ConditionType.EQUALS,
			"//ul[contains(@class,'flex')]/li[a[not(contains(@aria-label,'previous')) and not(contains(@aria-label,'next'))]]/a")
		
	js.executeScript("window.scrollTo(0, document.body.scrollHeight)")
	List<WebElement> visiblePageNumberElementsIp = WebUiCommonHelper.findWebElements(pageNumberLinksIp, 10)
	scrollToVisible(visiblePageNumberElementsIp.get(0), js)

		if (!visiblePageNumberElementsIp.isEmpty()) {
			// ƒ∞lk <a> etiketli sayfa numarasƒ± i√ßin dinamik TestObject olu≈ütur
			String firstPageText = visiblePageNumberElementsIp.get(0).getText()
			println("üéØ Beklenen sayfa sayƒ±sƒ±: " + firstPageText)

			TestObject scrollTarget = new TestObject("PageScrollTarget")
			scrollTarget.addProperty("xpath", ConditionType.EQUALS,
				"//ul[contains(@class,'flex')]/li/a[normalize-space(text())='" + firstPageText + "']")

			// safeScrollTo fonksiyonunu kullan
			WebElement element = safeScrollTo(scrollTarget)

			if (element != null) {				
				js.executeScript("window.scrollTo(0, document.body.scrollHeight)")
				WebUI.delay(1)
				}
		} else {
			KeywordUtil.logInfo("‚ùó Sayfa numarasƒ± bulunamadƒ±.")
	}


		// Ger√ßek sayfa numarasƒ±nƒ± al
		int actualLastPageNumberIp = 0
		for (WebElement pageElement : visiblePageNumberElementsIp) {
			String pageText = pageElement.getText().trim()
			if (pageText.matches("\\d+")) {
				int currentPage = Integer.parseInt(pageText)
				if (currentPage > actualLastPageNumberIp) {
					actualLastPageNumberIp = currentPage
				}
			}
		}

		println("üî¢ Ger√ßek son sayfa numarasƒ± (IP): " + actualLastPageNumberIp)
		//WebUI.verifyEqual(actualLastPageNumberIp, expectedPageCountIp)

	} else {
		WebUI.comment("‚ùó Test atlandƒ± √ß√ºnk√º Count deƒüeri 0 veya negatif: " + dataValueIp)
	}

} else {
	KeywordUtil.markWarning("‚ùå Bad Reputation bar path elementi bulunamadƒ±!")
	}	
	
	WebUI.back()
	WebUI.delay(3)
	WebUI.waitForPageLoad(30)

	// ‚úÖ 1. MalwareBar √ßubuƒüu tanƒ±mƒ± (Malwarexcount - j=0)
	TestObject malwareBar = new TestObject("malwareBar")
	malwareBar.addProperty("xpath", ConditionType.EQUALS,"(//*[name()='g' and contains(@class,'apexcharts-series') and @seriesName='Attackxcount']" +
			"//*[name()='path' and contains(@class,'apexcharts-bar-area') and @j='0'])[3]"	)
	
	if (WebUI.verifyElementPresent(malwareBar, 10, FailureHandling.OPTIONAL)) {
		WebElement barElement = safeScrollTo(malwareBar)
		if (barElement == null) {
			KeywordUtil.markWarning("‚ùå Scroll sonrasƒ± malwareBar elementi bulunamadƒ±!")
		}
	
		WebUI.waitForElementPresent(malwareBar, 5)
		WebElement barElem = WebUiCommonHelper.findWebElement(malwareBar, 5)
		String countVal = barElem.getAttribute("val")
		println("üìä malwareBar √ºzerindeki Count: " + countVal)
		int dataValueMalware = countVal.toInteger()
		
		if (dataValueMalware > 0) {
			WebUI.delay(3) // Sayfa y√ºklenmesi i√ßin bekle	
				
	
			// ‚úÖ Bar'a tƒ±kla
			WebUI.click(malwareBar)
			WebUI.delay(3)
	
			// Beklenen sayfa sayƒ±sƒ±nƒ± hesapla (10 kayƒ±t/sayfa)
			int expectedPageCountMalware = (int) Math.ceil(dataValueMalware / 10.0)
			println("üéØ Beklenen sayfa sayƒ±sƒ± (Malware - 10 kayƒ±t/sayfa): " + expectedPageCountMalware)
	
			WebUI.waitForPageLoad(10)
			js.executeScript("window.scrollTo(0, document.body.scrollHeight)")
	
			// Sayfa numaralarƒ±nƒ± bul
			TestObject pageNumberLinksMalware = new TestObject("pageNumberLinksMalware")
			pageNumberLinksMalware.addProperty("xpath", ConditionType.EQUALS,
				"//ul[contains(@class,'flex')]/li[a[not(contains(@aria-label,'previous')) and not(contains(@aria-label,'next'))]]/a")
	
			js.executeScript("window.scrollTo(0, document.body.scrollHeight)")
			List<WebElement> visiblePageNumberElementsMalware = WebUiCommonHelper.findWebElements(pageNumberLinksMalware, 10)
			scrollToVisible(visiblePageNumberElementsMalware.get(0), js)
	
			if (!visiblePageNumberElementsMalware.isEmpty()) {
				// ƒ∞lk <a> etiketli sayfa numarasƒ± i√ßin dinamik TestObject olu≈ütur
				String firstPageText = visiblePageNumberElementsMalware.get(0).getText()
				println("üéØ ƒ∞lk sayfa numarasƒ±: " + firstPageText)
	
				TestObject scrollTarget = new TestObject("PageScrollTarget")
				scrollTarget.addProperty("xpath", ConditionType.EQUALS,
					"//ul[contains(@class,'flex')]/li/a[normalize-space(text())='" + firstPageText + "']")
	
				// safeScrollTo fonksiyonunu kullan
				WebElement element = safeScrollTo(scrollTarget)
	
				if (element != null) {
					js.executeScript("window.scrollTo(0, document.body.scrollHeight)")
					WebUI.delay(1)
				}
			} else {
				KeywordUtil.logInfo("‚ùó Sayfa numarasƒ± bulunamadƒ±.")
			}
	
			// Ger√ßek sayfa numarasƒ±nƒ± al
			int actualLastPageNumberMalware = 0
			for (WebElement pageElement : visiblePageNumberElementsMalware) {
				String pageText = pageElement.getText().trim()
				if (pageText.matches("\\d+")) {
					int currentPage = Integer.parseInt(pageText)
					if (currentPage > actualLastPageNumberMalware) {
						actualLastPageNumberMalware = currentPage
					}
				}
			}
	
			println("üî¢ Ger√ßek son sayfa numarasƒ± (Malware): " + actualLastPageNumberMalware)
			WebUI.verifyEqual(actualLastPageNumberMalware, expectedPageCountMalware)
	
		} else {
			WebUI.comment("‚ùó Test atlandƒ± √ß√ºnk√º Count deƒüeri 0 veya negatif: " + dataValueMalware)
		}
	
	} else {
		KeywordUtil.markWarning("‚ùå Malware bar path elementi bulunamadƒ±!")
	}

	// === Helpers: scrollToVisible ===
	boolean scrollToVisible(WebElement el, JavascriptExecutor js, int maxTries = 6) {
		if (el == null) return false
		for (int i = 0; i < maxTries; i++) {
			// viewport i√ßinde mi?
			boolean inView = (Boolean) js.executeScript(
				"var r=arguments[0].getBoundingClientRect();" +
				"var h=(window.innerHeight||document.documentElement.clientHeight);" +
				"var w=(window.innerWidth||document.documentElement.clientWidth);" +
				"return r.top>=0 && r.left>=0 && r.bottom<=h && r.right<=w;", el)
	
			if (inView && el.isDisplayed()) return true
	
			// merkeze getir, sticky header i√ßin hafif yukarƒ± kaydƒ±r
			js.executeScript("arguments[0].scrollIntoView({block:'center', inline:'nearest'});", el)
			js.executeScript("window.scrollBy(0,-80);")  // header offset
			WebUI.delay(0.3)
	
			// ek fallback: mouse move
			try {
				new org.openqa.selenium.interactions.Actions(DriverFactory.getWebDriver())
					.moveToElement(el).perform()
			} catch (Exception ignore) {}
		}
		return (Boolean) js.executeScript(
			"var r=arguments[0].getBoundingClientRect();" +
			"var h=(window.innerHeight||document.documentElement.clientHeight);" +
			"var w=(window.innerWidth||document.documentElement.clientWidth);" +
			"return r.top>=0 && r.left>=0 && r.bottom<=h && r.right<=w;", el)
	}
	
	// TestObject ile kullanmak istersen:
	boolean scrollToVisible(TestObject to, JavascriptExecutor js, int timeout = 10) {
		if (!WebUI.waitForElementPresent(to, timeout, FailureHandling.OPTIONAL)) return false
		WebElement el = WebUiCommonHelper.findWebElement(to, timeout)
		return scrollToVisible(el, js)
	}
	