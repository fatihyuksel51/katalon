import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys
import com.kms.katalon.core.webui.driver.DriverFactory as DriverFactory
import org.openqa.selenium.JavascriptExecutor as JavascriptExecutor
import org.openqa.selenium.WebElement as WebElement
import com.kms.katalon.core.webui.common.WebUiCommonHelper as WebUiCommonHelper
import org.openqa.selenium.WebDriver as WebDriver
import com.kms.katalon.core.testobject.ConditionType as ConditionType
import com.kms.katalon.core.util.KeywordUtil as KeywordUtil
import org.openqa.selenium.By as By
import org.openqa.selenium.interactions.Actions as Actions
import org.openqa.selenium.support.ui.WebDriverWait as WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions as ExpectedConditions
import com.catchprobe.utils.MailReader as MailReader
import static com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords.*
import java.text.SimpleDateFormat

/*/ ‚úÖ G√ºvenli scroll fonksiyonu

WebUI.openBrowser('')

WebUI.navigateToUrl('https://platform.catchprobe.io/')

WebUI.maximizeWindow()

WebUI.waitForElementVisible(findTestObject('Object Repository/RiskRoute Dashboard/Page_/a_PLATFORM LOGIN'), 30)

safeScrollTo(findTestObject('Object Repository/RiskRoute Dashboard/Page_/a_PLATFORM LOGIN'))

WebUI.click(findTestObject('Object Repository/RiskRoute Dashboard/Page_/a_PLATFORM LOGIN'))

WebUI.waitForElementVisible(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Email Address_email'), 30)

safeScrollTo(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Email Address_email'))

WebUI.setText(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Email Address_email'), 'fatih@test.com')

safeScrollTo(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Password_password'))

WebUI.setEncryptedText(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Password_password'), 'v4yvAQ7Q279BF5ny4hDiTA==')

safeScrollTo(findTestObject('Object Repository/RiskRoute Dashboard/Page_/button_Sign in'))

WebUI.click(findTestObject('Object Repository/RiskRoute Dashboard/Page_/button_Sign in'))

WebUI.delay(5)

String randomOtp = (100000 + new Random().nextInt(900000)).toString()

safeScrollTo(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_OTP Digit_vi_1_2_3_4_5'))

WebUI.setText(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_OTP Digit_vi_1_2_3_4_5'), randomOtp)

safeScrollTo(findTestObject('Object Repository/RiskRoute Dashboard/Page_/button_Verify'))

WebUI.click(findTestObject('Object Repository/RiskRoute Dashboard/Page_/button_Verify'))

WebUI.delay(5)

WebUI.waitForPageLoad(10)



// 1. Sayfa y√ºklendikten sonra mevcut organizasyonu oku
TestObject currentOrg = new TestObject()
currentOrg.addProperty("xpath", ConditionType.EQUALS, "//div[contains(@class, 'font-semibold') and contains(text(), 'Organization')]//span[@class='font-thin']")

String currentOrgText = WebUI.getText(currentOrg)

// 2. Kontrol et: Eƒüer zaten TEST COMPANY ise hi√ßbir ≈üey yapma
if (currentOrgText != 'TEST COMPANY') {
	// 3. Organization butonuna tƒ±kla
	TestObject orgButton = new TestObject()
	orgButton.addProperty("xpath", ConditionType.EQUALS, "//button[.//div[contains(text(), 'Organization :')]]")
	WebUI.click(orgButton)

	// 4. TEST COMPANY se√ßeneƒüine tƒ±kla
	TestObject testCompanyOption = new TestObject()
	testCompanyOption.addProperty("xpath", ConditionType.EQUALS, "//button[.//div[text()='TEST COMPANY']]")
	WebUI.click(testCompanyOption)
}
WebUI.waitForPageLoad(10)
/*/


WebUI.navigateToUrl('https://platform.catchprobe.io/smartdeceptive/malware-analysis')

WebUI.delay(5) 
WebUI.waitForPageLoad(10)

WebDriver driver = DriverFactory.getWebDriver()

// Tablodaki t√ºm <tr> satƒ±rlarƒ±nƒ± bul
List<WebElement> rows = driver.findElements(By.xpath("//table/tbody/tr"))

println "${rows.size()} satƒ±r bulundu."

for (int i = 0; i < rows.size(); i++) {
	WebElement row = rows.get(i)

	// Score h√ºcresi
	List<WebElement> scoreEls = row.findElements(By.xpath(".//td[.//span[contains(@class, 'bg-cyan-500')]]//span"))
	if (scoreEls.isEmpty()) {
		println "${i + 1}. Satƒ±r ‚Üí Score elementi bulunamadƒ±, satƒ±r atlanƒ±yor.\n"
		continue
	}
	String scoreText = scoreEls.get(0).getText().trim().replace(",", ".")
	float score = Float.parseFloat(scoreText)

	// Status h√ºcresi
	List<WebElement> statusEls = row.findElements(By.xpath(".//td[.//span[contains(@class, 'bg-success')]]//span"))
	if (statusEls.isEmpty()) {
		println "${i + 1}. Satƒ±r ‚Üí Status elementi bulunamadƒ±, satƒ±r atlanƒ±yor.\n"
		continue
	}
	String statusText = statusEls.get(0).getText().trim()

	println "${i + 1}. Satƒ±r ‚Üí Score: ${score}, Status: ${statusText}"

	// ≈ûart kontrol√º
	if (score > 0 && statusText.equals("SUCCESS")) {
		println "‚Üí ≈ûartlar saƒülandƒ±. View butonuna tƒ±klanƒ±yor..."

		List<WebElement> viewBtns = row.findElements(By.xpath(".//td[.//span[contains(@class, 'bg-success')]]/following-sibling::td[2]//a"))
		if (!viewBtns.isEmpty()) {
			viewBtns.get(0).click()
			WebUI.delay(2)
		} else {
			KeywordUtil.markFailed("‚ùå View butonu bulunamadƒ±.")
		}
	} else {
		println "‚Üí ≈ûartlar saƒülanmadƒ±, satƒ±r ge√ßiliyor.\n"
	}
}
WebUI.delay(5)
WebUI.waitForPageLoad(20)
// Sayfada severity circle geldiƒüini doƒürula
TestObject circle = findTestObject('Object Repository/Malware Analysis/Stix Circle')

// Div'in g√∂r√ºnmesini bekle (maksimum 10 saniye)
if (WebUI.waitForElementVisible(circle, 20)) {
	
	// Elementi bul
	WebElement circleelement = WebUI.findWebElement(circle, 10)
	
	// Div'in i√ßinde circle olup olmadƒ±ƒüƒ±nƒ± kontrol et
	Boolean circleExistsRisk = WebUI.executeJavaScript(
		"return arguments[0].querySelector('circle') != null;",
		Arrays.asList(circleelement)
	)
	
	// Durumu logla
	KeywordUtil.logInfo("Stix Package Circle var mƒ±? : " + circleExistsRisk)
	
	if (circleExistsRisk) {
		KeywordUtil.logInfo("Stix Package Circle Veri VAR ‚úÖ")
	} else {
		KeywordUtil.logInfo("Stix Package Circle Veri YOK üö®")
	}
	
} else {
	KeywordUtil.logInfo("Stix Package Circle elementi g√∂r√ºnmedi ‚è∞")
}

// Detay sekmesinde JSON butonunun tƒ±klanabilir olduƒüunu doƒürula
WebUI.waitForElementClickable(findTestObject('Object Repository/Malware Analysis/Export'), 10)
WebUI.comment('Detay sekmesinde JSON butonu tƒ±klanabilir durumda.')

// Behavior sayfasƒ± butonu tƒ±kla ve sayfa kontrol et
WebUI.click(findTestObject('Object Repository/Malware Analysis/Behavior'))
WebUI.verifyElementPresent(findTestObject('Object Repository/Malware Analysis/BehaviorPageHeader'), 10)

// Mitre Attack
WebUI.click(findTestObject('Object Repository/Malware Analysis/Mitre Attack'))
WebUI.verifyElementPresent(findTestObject('Object Repository/Malware Analysis/MitrePageHeader'), 10)

// Network
WebUI.click(findTestObject('Object Repository/Malware Analysis/Network'))
WebUI.verifyElementPresent(findTestObject('Object Repository/Malware Analysis/NetworkPageHeader'), 10)

// Pcap
WebUI.click(findTestObject('Object Repository/Malware Analysis/Pcacpng'))
WebUI.verifyElementPresent(findTestObject('Object Repository/Malware Analysis/PcapPageHeader'), 10)

// Signatures
WebUI.click(findTestObject('Object Repository/Malware Analysis/Signatures'))
WebUI.verifyElementPresent(findTestObject('Object Repository/Malware Analysis/SignaturesPageHeader'), 10)

// Suricata
WebUI.click(findTestObject('Object Repository/Malware Analysis/Suricata'))
WebUI.verifyElementPresent(findTestObject('Object Repository/Malware Analysis/SuricataPageHeader'), 10)

// Target
WebUI.click(findTestObject('Object Repository/Malware Analysis/Target'))
WebUI.verifyElementPresent(findTestObject('Object Repository/Malware Analysis/TargetPageHeader'), 10)

// TTPS
WebUI.click(findTestObject('Object Repository/Malware Analysis/TTPS'))
WebUI.verifyElementPresent(findTestObject('Object Repository/Malware Analysis/TTPSPageHeader'), 10)

// URL Analysis
WebUI.click(findTestObject('Object Repository/Malware Analysis/URL Analysis'))
WebUI.verifyElementPresent(findTestObject('Object Repository/Malware Analysis/URLAnalysisPageHeader'), 10)


// Yardƒ±mcƒ± fonksiyonlar
TestObject makeXpathObj(String xpath) {
	TestObject to = new TestObject()
	to.addProperty("xpath", ConditionType.EQUALS, xpath)
	return to
}

WebElement safeScrollTo(TestObject to) {
	if (to == null || !WebUI.waitForElementPresent(to, 2)) {
		KeywordUtil.markFailed("‚ùå Scroll edilemedi: ${to.getObjectId()}")
		return null
	}
	WebElement element = WebUiCommonHelper.findWebElement(to, 5)
	JavascriptExecutor js = (JavascriptExecutor) DriverFactory.getWebDriver()
	js.executeScript("arguments[0].scrollIntoView({block: 'center'});", element)
	WebUI.delay(0.5)
	return element
}

void scrollToBottom() {
	JavascriptExecutor js = (JavascriptExecutor) DriverFactory.getWebDriver()
	js.executeScript("window.scrollTo(0, document.body.scrollHeight)")
}

