import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys
import com.kms.katalon.core.webui.driver.DriverFactory as DriverFactory
import org.openqa.selenium.JavascriptExecutor as JavascriptExecutor
import org.openqa.selenium.WebElement as WebElement
import com.kms.katalon.core.webui.common.WebUiCommonHelper as WebUiCommonHelper
import org.openqa.selenium.WebDriver as WebDriver
import com.kms.katalon.core.testobject.ConditionType as ConditionType
import com.kms.katalon.core.util.KeywordUtil as KeywordUtil
import org.openqa.selenium.By as By
import org.openqa.selenium.interactions.Actions as Actions
import org.openqa.selenium.support.ui.WebDriverWait as WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions as ExpectedConditions
import com.catchprobe.utils.MailReader as MailReader
import static com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords.*
import java.text.SimpleDateFormat

TestObject X(String xp) {
    TestObject to = new TestObject(xp)
    to.addProperty("xpath", ConditionType.EQUALS, xp)
    return to
}

boolean isBrowserOpen() {
    try { DriverFactory.getWebDriver(); return true } catch(Throwable t){ return false }
}

void ensureSession() {
    if (isBrowserOpen()) return
    WebUI.openBrowser('')
    WebUI.maximizeWindow()
    WebUI.navigateToUrl('https://platform.catchprobe.io/')

    WebUI.waitForElementVisible(findTestObject('Object Repository/RiskRoute Dashboard/Page_/a_PLATFORM LOGIN'), 30)
    WebUI.click(findTestObject('Object Repository/RiskRoute Dashboard/Page_/a_PLATFORM LOGIN'))

    WebUI.waitForElementVisible(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Email Address_email'), 30)
    WebUI.setText(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Email Address_email'), 'fatih@test.com')
    WebUI.setEncryptedText(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Password_password'), 'v4yvAQ7Q279BF5ny4hDiTA==')
    WebUI.click(findTestObject('Object Repository/RiskRoute Dashboard/Page_/button_Sign in'))

    WebUI.delay(3)
    String otp = (100000 + new Random().nextInt(900000)).toString()
    WebUI.setText(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_OTP Digit_vi_1_2_3_4_5'), otp)
    WebUI.click(findTestObject('Object Repository/RiskRoute Dashboard/Page_/button_Verify'))
    WebUI.delay(2)

    WebUI.waitForElementVisible(X("//span[text()='Threat']"), 10, FailureHandling.OPTIONAL)
}

/** elementi merkeze kaydƒ±r */
void scrollCenter(TestObject to) {
    WebElement el = WebUiCommonHelper.findWebElement(to, 10)
    WebUI.executeJavaScript("arguments[0].scrollIntoView({block:'center'})", Arrays.asList(el))
}

/** click ‚Üí enhancedClick ‚Üí JS click sƒ±ralamasƒ± */
boolean clickSmart(TestObject to, int timeout=15){
  if(!WebUI.waitForElementVisible(to, timeout, FailureHandling.OPTIONAL)){
    if(!WebUI.waitForElementPresent(to, timeout, FailureHandling.OPTIONAL)){
      KeywordUtil.markWarning("‚è≥ Element gelmedi: " + to.getObjectId())
      return false
    }
  }
  try{
    WebUI.waitForElementClickable(to, 10, FailureHandling.OPTIONAL)
    scrollCenter(to)
    WebUI.click(to)
    return true
  }catch(Throwable e1){
    try{
      WebUI.enhancedClick(to); return true
    }catch(Throwable e2){
      WebElement el = WebUiCommonHelper.findWebElement(to, 10)
      WebUI.executeJavaScript("arguments[0].click()", Arrays.asList(el))
      return true
    }
  }
}


/** Repo varsa kullan, yoksa dinamik XPath ile olu≈ütur */
TestObject repoOr(String repoPath, String fallbackXpath) {
    TestObject to = null
    try { to = findTestObject(repoPath) } catch(Throwable ignore){}
    if (to != null) return to
    KeywordUtil.logInfo("‚ö†Ô∏è Repo objesi bulunamadƒ±: " + repoPath + " ‚Üí dinamik XPath kullanƒ±lacak.")
    return X(fallbackXpath)
}

/** Ba≈ülƒ±k doƒürulama: repo ya da dinamik ba≈ülƒ±k */
void verifyHeader(String repoHeaderPathOrNull, String headerText) {
    TestObject hdr = null
    try { if (repoHeaderPathOrNull) hdr = findTestObject(repoHeaderPathOrNull) } catch(Throwable ignore){}
    if (hdr == null) {
        // H1/H2/H3, sekme ba≈ülƒ±ƒüƒ± veya sayfa i√ßinde g√∂r√ºnen ba≈ülƒ±klar
        hdr = X("//*[self::h1 or self::h2 or self::h3 or self::span or self::div]" +
                "[contains(normalize-space(.), \"" + headerText + "\")]")
    }
    WebUI.verifyElementPresent(hdr, 10)
}

/************** TEST: Malware Analysis **************/
ensureSession()


WebUI.navigateToUrl('https://platform.catchprobe.io/smartdeceptive/malware-analysis')

WebUI.delay(5) 
WebUI.waitForPageLoad(10)
WebDriver driver = DriverFactory.getWebDriver()

// Tablo y√ºklensin
WebUI.waitForPageLoad(10)
WebUI.delay(1)

boolean opened = false
int i = 0
int safetyMax = 100  // sonsuz d√∂ng√º olmasƒ±n

while (i < safetyMax) {
    // Her turda satƒ±rlarƒ± yeniden bul
    List<WebElement> rowsNow = driver.findElements(By.xpath("//table/tbody/tr"))
    if (rowsNow.isEmpty()) {
        KeywordUtil.markFailedAndStop("‚ùå Tabloda satƒ±r bulunamadƒ±.")
    }
    if (i >= rowsNow.size()) break

    try {
        WebElement row = rowsNow.get(i)

        // Score
        List<WebElement> scoreEls = row.findElements(By.xpath(".//td[.//span[contains(@class,'bg-cyan-500')]]//span"))
        if (scoreEls.isEmpty()) { i++; continue }
        String scoreText = scoreEls.get(0).getText().trim().replace(",", ".")
        float score = Float.parseFloat(scoreText)

        // Status
        List<WebElement> statusEls = row.findElements(By.xpath(".//td[.//span[contains(@class,'bg-success')]]//span"))
        String statusText = statusEls.isEmpty() ? "" : statusEls.get(0).getText().trim()

        println("${i+1}. Satƒ±r ‚Üí Score: ${score}, Status: ${statusText}")

        if (score > 0 && "SUCCESS".equals(statusText)) {
            // View butonu
            List<WebElement> viewBtns = row.findElements(By.xpath(".//td[.//span[contains(@class,'bg-success')]]/following-sibling::td[2]//a"))
            if (!viewBtns.isEmpty()) {
                viewBtns.get(0).click()

                // üìå Eski row/rows artƒ±k GE√áERSƒ∞Z; d√∂ng√ºden √áIK
                WebUI.waitForPageLoad(20)
                opened = true

                // Detay sayfasƒ±ndan ayƒ±rt edici bir elementi bekle
                WebUI.waitForElementVisible(findTestObject('Object Repository/Malware Analysis/Export'), 20)
                break
            }
        }

        i++ // sonraki satƒ±r

    } catch (org.openqa.selenium.StaleElementReferenceException se) {
        // DOM yenilenmi≈ü ‚Üí aynƒ± indexi tekrar dene
        KeywordUtil.logInfo("‚Üª Row stale oldu, yeniden bulunuyor‚Ä¶")
        WebUI.delay(1)
        // i aynƒ± kalsƒ±n
    }
}

if (!opened) {
    KeywordUtil.markFailedAndStop("‚ùå SUCCESS satƒ±rƒ± bulunamadƒ± veya View a√ßƒ±lamadƒ±.")
}
WebUI.delay(5)
WebUI.waitForPageLoad(20)
// Stix Circle kontrol√º
TestObject circle = repoOr('Object Repository/Malware Analysis/Stix Circle', "//*[name()='svg']//*[name()='circle']")
if (WebUI.waitForElementVisible(circle, 10)) {
    WebElement circleEl = WebUiCommonHelper.findWebElement(circle, 10)
    Boolean circleExists = (Boolean) WebUI.executeJavaScript(
            "return arguments[0].querySelector('circle') != null;", Arrays.asList(circleEl))
    KeywordUtil.logInfo("Stix Package Circle var mƒ±? : " + circleExists)
    if (circleExists) KeywordUtil.logInfo("Stix Package Circle Veri VAR ‚úÖ") else KeywordUtil.logInfo("Stix Package Circle Veri YOK üö®")
} else {
    KeywordUtil.logInfo("Stix Package Circle elementi g√∂r√ºnmedi ‚è∞")
}

// Export/JSON tƒ±klanabilir
WebUI.waitForElementClickable(
    repoOr('Object Repository/Malware Analysis/Export', "//button[normalize-space()='Export' or normalize-space()='JSON']"),
    10
)
WebUI.comment('Detay sekmesinde JSON/Export butonu tƒ±klanabilir durumda.')

/** Sekmeler: buton XPath ve ba≈ülƒ±k doƒürulamasƒ± aynƒ± metne g√∂re yapƒ±lacak */
def tabs = [
    [name:'Behavior',      repoBtn:'Object Repository/Malware Analysis/Behavior',         btnXpath:"//button[text()='Behavior']",
                             repoHdr:'Object Repository/Malware Analysis/BehaviorPageHeader'],
    [name:'Mitre Attack',  repoBtn:'Object Repository/Malware Analysis/Mitre Attack',     btnXpath:"//button[text()='Mitre Attack']",
                             repoHdr:'Object Repository/Malware Analysis/MitrePageHeader'],
    [name:'Network',       repoBtn:'Object Repository/Malware Analysis/Network',          btnXpath:"//button[text()='Network']",
                             repoHdr:'Object Repository/Malware Analysis/NetworkPageHeader'],
    [name:'Pcapng',        repoBtn:'Object Repository/Malware Analysis/Pcacpng',          btnXpath:"//button[text()='Pcapng']",
                             repoHdr:'Object Repository/Malware Analysis/PcapPageHeader'],
    [name:'Signatures',    repoBtn:'Object Repository/Malware Analysis/Signatures',       btnXpath:"//button[text()='Signatures']",
                             repoHdr:'Object Repository/Malware Analysis/SignaturesPageHeader'],
    [name:'Suricata',      repoBtn:'Object Repository/Malware Analysis/Suricata',         btnXpath:"//*[contains(text(),'Suricata')]",
                             repoHdr:'Object Repository/Malware Analysis/SuricataPageHeader'],
    [name:'Target',        repoBtn:'Object Repository/Malware Analysis/Target',           btnXpath:"//button[text()='Target']",
                             repoHdr:'Object Repository/Malware Analysis/TargetPageHeader'],
    [name:'TTPS',          repoBtn:'Object Repository/Malware Analysis/TTPS',             btnXpath:"//button[text()='TTPS']",
                             repoHdr:'Object Repository/Malware Analysis/TTPSPageHeader'],
    [name:'URL Analysis',  repoBtn:'Object Repository/Malware Analysis/URL Analysis',     btnXpath:"//button[text()='URL Analysis']",
                             repoHdr:'Object Repository/Malware Analysis/URLAnalysisPageHeader'],
]

for (def t : tabs) {
    TestObject btn = repoOr(t.repoBtn as String, t.btnXpath as String)
    clickSmart(btn)
    verifyHeader(t.repoHdr as String, t.name as String)
}



// Yardƒ±mcƒ± fonksiyonlar
TestObject makeXpathObj(String xpath) {
	TestObject to = new TestObject()
	to.addProperty("xpath", ConditionType.EQUALS, xpath)
	return to
}

WebElement safeScrollTo(TestObject to) {
	if (to == null || !WebUI.waitForElementPresent(to, 2)) {
		KeywordUtil.markFailed("‚ùå Scroll edilemedi: ${to.getObjectId()}")
		return null
	}
	WebElement element = WebUiCommonHelper.findWebElement(to, 5)
	JavascriptExecutor js = (JavascriptExecutor) DriverFactory.getWebDriver()
	js.executeScript("arguments[0].scrollIntoView({block: 'center'});", element)
	WebUI.delay(0.5)
	return element
}

void scrollToBottom() {
	JavascriptExecutor js = (JavascriptExecutor) DriverFactory.getWebDriver()
	js.executeScript("window.scrollTo(0, document.body.scrollHeight)")
}

