/************** Imports **************/
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.testobject.ConditionType
import com.kms.katalon.core.testobject.TestObject
import com.kms.katalon.core.util.KeywordUtil
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import internal.GlobalVariable

import org.openqa.selenium.WebElement
import org.openqa.selenium.JavascriptExecutor
import java.util.Random
import java.util.Arrays

/************** Mini yardƒ±mcƒ±lar **************/
TestObject X(String xp) {
    TestObject to = new TestObject(xp)
    to.addProperty("xpath", ConditionType.EQUALS, xp)
    return to
}

boolean isBrowserOpen() {
    try { DriverFactory.getWebDriver(); return true } catch(Throwable t){ return false }
}

void ensureSession() {
    if (isBrowserOpen()) return
    WebUI.openBrowser('')
    WebUI.maximizeWindow()
    WebUI.navigateToUrl('https://platform.catchprobe.org/')

    WebUI.waitForElementVisible(findTestObject('Object Repository/RiskRoute Dashboard/Page_/a_PLATFORM LOGIN'), 30)
    WebUI.click(findTestObject('Object Repository/RiskRoute Dashboard/Page_/a_PLATFORM LOGIN'))

    WebUI.waitForElementVisible(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Email Address_email'), 30)
    WebUI.setText(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Email Address_email'), 'katalon.test@catchprobe.com')
    WebUI.setEncryptedText(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_Password_password'), 'RigbBhfdqOBDK95asqKeHw==')
    WebUI.click(findTestObject('Object Repository/RiskRoute Dashboard/Page_/button_Sign in'))

    WebUI.delay(3)
    String otp = (100000 + new Random().nextInt(900000)).toString()
    WebUI.setText(findTestObject('Object Repository/RiskRoute Dashboard/Page_/input_OTP Digit_vi_1_2_3_4_5'), otp)
    WebUI.click(findTestObject('Object Repository/RiskRoute Dashboard/Page_/button_Verify'))
    WebUI.delay(2)

    WebUI.waitForElementVisible(X("//span[text()='Threat']"), 10, FailureHandling.OPTIONAL)
}

/** elementi merkeze kaydƒ±r */
void scrollCenter(TestObject to) {
    WebElement el = WebUiCommonHelper.findWebElement(to, 10)
    WebUI.executeJavaScript("arguments[0].scrollIntoView({block:'center'})", Arrays.asList(el))
}

/** click ‚Üí enhancedClick ‚Üí JS click sƒ±ralamasƒ± */
void clickSmart(TestObject to) {
    WebUI.waitForElementVisible(to, 10)
    scrollCenter(to)
    try {
        WebUI.waitForElementClickable(to, 10, FailureHandling.OPTIONAL)
        WebUI.click(to)
    } catch (Throwable e1) {
        try {
            WebUI.enhancedClick(to)
        } catch (Throwable e2) {
            WebElement el = WebUiCommonHelper.findWebElement(to, 10)
            WebUI.executeJavaScript("arguments[0].click()", Arrays.asList(el))
        }
    }
}

/** Repo varsa kullan, yoksa dinamik XPath ile olu≈ütur */
TestObject repoOr(String repoPath, String fallbackXpath) {
    TestObject to = null
    try { to = findTestObject(repoPath) } catch(Throwable ignore){}
    if (to != null) return to
    KeywordUtil.logInfo("‚ö†Ô∏è Repo objesi bulunamadƒ±: " + repoPath + " ‚Üí dinamik XPath kullanƒ±lacak.")
    return X(fallbackXpath)
}

/** Ba≈ülƒ±k doƒürulama: repo ya da dinamik ba≈ülƒ±k */
void verifyHeader(String repoHeaderPathOrNull, String headerText) {
    TestObject hdr = null
    try { if (repoHeaderPathOrNull) hdr = findTestObject(repoHeaderPathOrNull) } catch(Throwable ignore){}
    if (hdr == null) {
        // H1/H2/H3, sekme ba≈ülƒ±ƒüƒ± veya sayfa i√ßinde g√∂r√ºnen ba≈ülƒ±klar
        hdr = X("//*[self::h1 or self::h2 or self::h3 or self::span or self::div]" +
                "[contains(normalize-space(.), \"" + headerText + "\")]")
    }
    WebUI.verifyElementPresent(hdr, 10)
}

/************** TEST: Malware Analysis **************/
ensureSession()

// Threatway ‚Üí Malware Analysis
WebUI.navigateToUrl('https://platform.catchprobe.org/threatway')
WebUI.waitForPageLoad(30)
WebUI.delay(2)

// (ƒ∞steƒüe baƒülƒ±) Toast kontrol√ºn hata kƒ±rmamasƒ± i√ßin OPTIONAL tutulabilir
try {
    CustomKeywords.'com.catchprobe.utils.TableUtils.checkForUnexpectedToasts'()
} catch(Throwable e) {
    KeywordUtil.logInfo("Toast kontrol√º OPTIONAL: " + e.getMessage())
}

WebUI.navigateToUrl('https://platform.catchprobe.org/threatway/malware-analysis')
WebUI.waitForPageLoad(30)

// COMPLETED metni
WebUI.verifyElementText(
    repoOr('Object Repository/Malware Analysis/Completed text', "//*[normalize-space(.)='COMPLETED']"),
    'COMPLETED'
)

// Create akƒ±≈üƒ±
clickSmart(repoOr('Object Repository/Malware Analysis/Create butonu', "//button[normalize-space()='Create']"))
clickSmart(repoOr('Object Repository/Malware Analysis/File Create', "//button[normalize-space()='File Create']"))
WebUI.verifyElementText(
    repoOr('Object Repository/Malware Analysis/Toast Message', "//*[contains(normalize-space(),'Please select a file.')]"),
    'Please select a file.'
)
clickSmart(repoOr('Object Repository/Malware Analysis/Cancel buton', "//button[normalize-space()='Cancel']"))

// Action
clickSmart(repoOr('Object Repository/Malware Analysis/actionButton', "//button[contains(@class,'action') or @aria-label='Actions' or .//*[contains(@class,'lucide')]]"))

// Stix Circle kontrol√º
TestObject circle = repoOr('Object Repository/Malware Analysis/Stix Circle', "//*[name()='svg']//*[name()='circle']")
if (WebUI.waitForElementVisible(circle, 10)) {
    WebElement circleEl = WebUiCommonHelper.findWebElement(circle, 10)
    Boolean circleExists = (Boolean) WebUI.executeJavaScript(
            "return arguments[0].querySelector('circle') != null;", Arrays.asList(circleEl))
    KeywordUtil.logInfo("Stix Package Circle var mƒ±? : " + circleExists)
    if (circleExists) KeywordUtil.logInfo("Stix Package Circle Veri VAR ‚úÖ") else KeywordUtil.logInfo("Stix Package Circle Veri YOK üö®")
} else {
    KeywordUtil.logInfo("Stix Package Circle elementi g√∂r√ºnmedi ‚è∞")
}

// Export/JSON tƒ±klanabilir
WebUI.waitForElementClickable(
    repoOr('Object Repository/Malware Analysis/Export', "//button[normalize-space()='Export' or normalize-space()='JSON']"),
    10
)
WebUI.comment('Detay sekmesinde JSON/Export butonu tƒ±klanabilir durumda.')

/** Sekmeler: buton XPath ve ba≈ülƒ±k doƒürulamasƒ± aynƒ± metne g√∂re yapƒ±lacak */
def tabs = [
    [name:'Behavior',      repoBtn:'Object Repository/Malware Analysis/Behavior',         btnXpath:"//button[text()='Behavior']",
                             repoHdr:'Object Repository/Malware Analysis/BehaviorPageHeader'],
    [name:'Mitre Attack',  repoBtn:'Object Repository/Malware Analysis/Mitre Attack',     btnXpath:"//button[text()='Mitre Attack']",
                             repoHdr:'Object Repository/Malware Analysis/MitrePageHeader'],
    [name:'Network',       repoBtn:'Object Repository/Malware Analysis/Network',          btnXpath:"//button[text()='Network']",
                             repoHdr:'Object Repository/Malware Analysis/NetworkPageHeader'],
    [name:'Pcapng',        repoBtn:'Object Repository/Malware Analysis/Pcacpng',          btnXpath:"//button[text()='Pcapng']",
                             repoHdr:'Object Repository/Malware Analysis/PcapPageHeader'],
    [name:'Signatures',    repoBtn:'Object Repository/Malware Analysis/Signatures',       btnXpath:"//button[text()='Signatures']",
                             repoHdr:'Object Repository/Malware Analysis/SignaturesPageHeader'],
    [name:'Suricata',      repoBtn:'Object Repository/Malware Analysis/Suricata',         btnXpath:"//*[contains(text(),'Suricata')]",
                             repoHdr:'Object Repository/Malware Analysis/SuricataPageHeader'],
    [name:'Target',        repoBtn:'Object Repository/Malware Analysis/Target',           btnXpath:"//button[text()='Target']",
                             repoHdr:'Object Repository/Malware Analysis/TargetPageHeader'],
    [name:'TTPS',          repoBtn:'Object Repository/Malware Analysis/TTPS',             btnXpath:"//button[text()='TTPS']",
                             repoHdr:'Object Repository/Malware Analysis/TTPSPageHeader'],
    [name:'URL Analysis',  repoBtn:'Object Repository/Malware Analysis/URL Analysis',     btnXpath:"//button[text()='URL Analysis']",
                             repoHdr:'Object Repository/Malware Analysis/URLAnalysisPageHeader'],
]

for (def t : tabs) {
    TestObject btn = repoOr(t.repoBtn as String, t.btnXpath as String)
    clickSmart(btn)
    verifyHeader(t.repoHdr as String, t.name as String)
}
