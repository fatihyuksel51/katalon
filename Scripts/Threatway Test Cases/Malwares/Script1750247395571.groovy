import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint

import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import org.openqa.selenium.WebElement
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.Keys
import org.openqa.selenium.WebElement as Keys
import com.kms.katalon.core.testobject.ConditionType


// ✅ Fonksiyon: Scroll edip görünür hale getir
def scrollToVisible(WebElement element, JavascriptExecutor js) {
	int currentScroll = 0
	boolean isVisible = false
	while (!isVisible && currentScroll < 3000) {
		js.executeScript("window.scrollBy(0, 200)")
		WebUI.delay(0.5)
		isVisible = element.isDisplayed()
		currentScroll += 200
	}
	return isVisible
}
/*/
WebUI.openBrowser('')

WebUI.navigateToUrl('https://platform.catchprobe.org/')

WebUI.maximizeWindow()

// Login işlemleri
WebUI.waitForElementVisible(findTestObject('Object Repository/otp/Page_/a_PLATFORM LOGIN'), 30)

WebUI.click(findTestObject('Object Repository/otp/Page_/a_PLATFORM LOGIN'))

WebUI.waitForElementVisible(findTestObject('Object Repository/otp/Page_/input_Email Address_email'), 30)

WebUI.setText(findTestObject('Object Repository/otp/Page_/input_Email Address_email'), 'fatih.yuksel@catchprobe.com')

WebUI.setEncryptedText(findTestObject('Object Repository/otp/Page_/input_Password_password'), 'RigbBhfdqOBDK95asqKeHw==')

WebUI.click(findTestObject('Object Repository/otp/Page_/button_Sign in'))

WebUI.delay(4)

// OTP işlemi
def randomOtp = (100000 + new Random().nextInt(900000)).toString()

WebUI.setText(findTestObject('Object Repository/otp/Page_/input_OTP Digit_vi_1_2_3_4_5'), randomOtp)

WebUI.click(findTestObject('Object Repository/otp/Page_/button_Verify'))

CustomKeywords.'com.catchprobe.utils.TableUtils.checkForUnexpectedToasts'()
/*/

// Threatway sekmesine tıkla
// Threatway sekmesine git
WebUI.navigateToUrl('https://platform.catchprobe.org/threatway')
WebUI.waitForPageLoad(30)

CustomKeywords.'com.catchprobe.utils.TableUtils.checkForUnexpectedToasts'()

//Malwares Linkine Tıkla
TestObject malwareslink = findTestObject('Object Repository/Malwares/MalwaresLİnk')

// WebElement olarak al
WebElement linkElement = WebUiCommonHelper.findWebElement(malwareslink, 10)

// JavascriptExecutor al
JavascriptExecutor js = (JavascriptExecutor) DriverFactory.getWebDriver()

// Scroll edip görünür yap
scrollToVisible(linkElement, js)

// Tıkla
WebUI.click(malwareslink)
WebUI.waitForPageLoad(30)

CustomKeywords.'com.catchprobe.utils.TableUtils.checkForUnexpectedToasts'()

// Sayfa sonundaki pagination öğesini al
TestObject paginationObject = findTestObject('Object Repository/Malwares/Pagination')
WebElement paginationElement = WebUiCommonHelper.findWebElement(paginationObject, 10)

// Pagination görünür hale gelene kadar bekle ve scroll et
WebUI.waitForElementVisible(paginationObject, 10)
scrollToVisible(paginationElement, js)
js.executeScript("window.scrollTo(0, document.body.scrollHeight)")
WebUI.delay(1)

// Pagination öğesine tıkla
WebUI.waitForElementClickable(paginationObject, 10)
WebUI.click(paginationObject)
WebUI.delay(1)

// Arama kutusuna "Downdelph" yaz
TestObject inputObject = findTestObject('Object Repository/Malwares/İnput')
WebUI.waitForElementVisible(inputObject, 10)
WebUI.setText(inputObject, 'Downdelph')
WebUI.delay(1)

// Arama butonuna tıkla
TestObject searchButton = findTestObject('Object Repository/Malwares/Searchbutton')
WebUI.waitForElementClickable(searchButton, 10)
WebUI.click(searchButton)
WebUI.delay(2)

// İlk sonucu al ve kontrol et
TestObject firstResult = findTestObject('Object Repository/Malwares/firstbutton') 
WebUI.waitForElementVisible(firstResult, 10)
String firstTitleDesc = WebUI.getText(firstResult)

// Sonuç doğrulama
assert firstTitleDesc.contains('Downdelph')

//ilk sonuca tıkla
WebUI.waitForElementClickable(findTestObject('Object Repository/Malwares/firstbutton'), 10)
WebUI.click(findTestObject('Object Repository/Malwares/firstbutton'))

// ✔️ Açıklama içeriğini doğrula
TestObject descObject = findTestObject('Object Repository/Malwares/DescriptionBlock')  // tanım blok objeni senin oluşturman lazım
WebElement descElement = WebUiCommonHelper.findWebElement(descObject, 10)
String descriptionText = descElement.getText()

// Beklenen içerikler
assert descriptionText.contains("Downdelph is a lightweight downloader developed in the Delphi programming language")
assert descriptionText.contains("Downdelph is a first-stage component deployed only in very rare cases")
assert descriptionText.contains("Distinguishing characteristics")
assert descriptionText.contains("infecting the Master Boot Record (MBR)")
assert descriptionText.contains("intelmeserver[.]com")
WebUI.delay(3)

// ✔️ Görsel (zaman çizelgesi görseli) doğrulama
TestObject imageObject = findTestObject('Object Repository/Malwares/TimelineImage')
WebUI.scrollToElement(imageObject, 5)
WebUI.waitForElementVisible(imageObject, 10)
boolean isImageVisible = WebUI.verifyElementVisible(imageObject)
assert isImageVisible == true


// Signatures sekmesine tıkla
WebUI.waitForElementClickable(findTestObject('Object Repository/Malwares/Signatures'), 15)
WebUI.click(findTestObject('Object Repository/Malwares/Signatures'))

// CSV butonunun tıklanabilir olduğunu kontrol et
boolean isCsvClickablesig = WebUI.waitForElementClickable(findTestObject('Object Repository/Malwares/CSV button'), 10, FailureHandling.OPTIONAL)

if (isCsvClickablesig) {
	WebUI.comment('CSV butonu tıklanabilir.')
} else {
	WebUI.comment('CSV butonu tıklanabilir değil.')
	WebUI.takeScreenshot()
	WebUI.verifyElementClickable(findTestObject('Object Repository/Malwares/CSV button')) // burada step fail olur zaten
}

// Files sekmesine tıkla
WebUI.waitForElementClickable(findTestObject('Object Repository/Malwares/Files'), 15)
WebUI.click(findTestObject('Object Repository/Malwares/Files'))

// CSV butonunun tıklanabilir olduğunu kontrol et
boolean isCsvClickable = WebUI.waitForElementClickable(findTestObject('Object Repository/Malwares/CSV button'), 10, FailureHandling.OPTIONAL)

if (isCsvClickable) {
	WebUI.comment('CSV butonu tıklanabilir.')
} else {
	WebUI.comment('CSV butonu tıklanabilir değil.')
	WebUI.takeScreenshot()
	WebUI.verifyElementClickable(findTestObject('Object Repository/Malwares/CSV button')) // burada step fail olur zaten
}

// Mitre sekmesini kapat
WebUI.click(findTestObject('Object Repository/Malwares/Mitre Close'))





